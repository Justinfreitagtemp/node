{ version: '1.0',
  depends_on: 
   [ { path: '/System/Library/Frameworks/CoreFoundation.framework' },
     { path: '/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework' },
     { path: '/System/Library/Frameworks/SystemConfiguration.framework' },
     { path: '/System/Library/Frameworks/Security.framework' },
     { path: '/System/Library/Frameworks/CoreServices.framework' },
     { path: '/System/Library/Frameworks/IOKit.framework' } ],
  struct: 
   [ { name: 'NSAffineTransformStruct',
       type64: '{_NSAffineTransformStruct="m11"d"m12"d"m21"d"m22"d"tX"d"tY"d}',
       type: '{_NSAffineTransformStruct="m11"f"m12"f"m21"f"m22"f"tX"f"tY"f}' },
     { name: 'NSDecimal',
       opaque: 'true',
       type: '{_NSDecimal="_exponent"b8"_length"b4"_isNegative"b1"_isCompact"b1"_reserved"b18"_mantissa"[8S]}' },
     { name: 'NSFastEnumerationState',
       type64: '{_NSFastEnumerationState="state"Q"itemsPtr"^@"mutationsPtr"^Q"extra"[5Q]}',
       type: '{_NSFastEnumerationState="state"L"itemsPtr"^@"mutationsPtr"^L"extra"[5L]}' },
     { name: 'NSHashEnumerator',
       type64: '{_NSHashEnumerator="_pi"Q"_si"Q"_bs"^v}',
       type: '{_NSHashEnumerator="_pi"I"_si"I"_bs"^v}' },
     { name: 'NSHashTableCallBacks',
       type: '{_NSHashTableCallBacks="hash"^?"isEqual"^?"retain"^?"release"^?"describe"^?}' },
     { name: 'NSMapEnumerator',
       type64: '{_NSMapEnumerator="_pi"Q"_si"Q"_bs"^v}',
       type: '{_NSMapEnumerator="_pi"I"_si"I"_bs"^v}' },
     { name: 'NSMapTableKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks="hash"^?"isEqual"^?"retain"^?"release"^?"describe"^?"notAKeyMarker"^v}' },
     { name: 'NSMapTableValueCallBacks',
       type: '{_NSMapTableValueCallBacks="retain"^?"release"^?"describe"^?}' },
     { name: 'NSPoint',
       type64: '{CGPoint="x"d"y"d}',
       type: '{_NSPoint="x"f"y"f}' },
     { name: 'NSRange',
       type64: '{_NSRange="location"Q"length"Q}',
       type: '{_NSRange="location"I"length"I}' },
     { name: 'NSRect',
       type64: '{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}',
       type: '{_NSRect="origin"{_NSPoint="x"f"y"f}"size"{_NSSize="width"f"height"f}}' },
     { name: 'NSSize',
       type64: '{CGSize="width"d"height"d}',
       type: '{_NSSize="width"f"height"f}' },
     { name: 'NSSwappedDouble', type: '{_NSSwappedDouble="v"Q}' },
     { name: 'NSSwappedFloat', type: '{_NSSwappedFloat="v"I}' } ],
  opaque: 
   [ { name: 'NSAppleEventManagerSuspensionID',
       type: '^{__NSAppleEventManagerSuspension=}' },
     { name: 'NSZone', type: '^{_NSZone=}' } ],
  constant: 
   [ { name: 'NSAMPMDesignation', type: '@' },
     { name: 'NSAppleEventManagerWillProcessFirstEventNotification',
       type: '@' },
     { name: 'NSAppleEventTimeOutDefault', type: 'd' },
     { name: 'NSAppleEventTimeOutNone', type: 'd' },
     { name: 'NSAppleScriptErrorAppName', type: '@' },
     { name: 'NSAppleScriptErrorBriefMessage', type: '@' },
     { name: 'NSAppleScriptErrorMessage', type: '@' },
     { name: 'NSAppleScriptErrorNumber', type: '@' },
     { name: 'NSAppleScriptErrorRange', type: '@' },
     { name: 'NSArgumentDomain', type: '@' },
     { name: 'NSAssertionHandlerKey', type: '@' },
     { name: 'NSAverageKeyValueOperator', type: '@' },
     { name: 'NSBuddhistCalendar', type: '@' },
     { name: 'NSBundleDidLoadNotification', type: '@' },
     { name: 'NSCharacterConversionException', type: '@' },
     { name: 'NSChineseCalendar', type: '@' },
     { name: 'NSClassDescriptionNeededForClassNotification',
       type: '@' },
     { name: 'NSCocoaErrorDomain', type: '@' },
     { name: 'NSConnectionDidDieNotification', type: '@' },
     { name: 'NSConnectionDidInitializeNotification', type: '@' },
     { name: 'NSConnectionReplyMode', type: '@' },
     { name: 'NSCountKeyValueOperator', type: '@' },
     { name: 'NSCurrencySymbol', type: '@' },
     { name: 'NSCurrentLocaleDidChangeNotification', type: '@' },
     { name: 'NSDateFormatString', type: '@' },
     { name: 'NSDateTimeOrdering', type: '@' },
     { name: 'NSDeallocateZombies', type: 'B' },
     { name: 'NSDebugEnabled', type: 'B' },
     { name: 'NSDecimalDigits', type: '@' },
     { name: 'NSDecimalNumberDivideByZeroException', type: '@' },
     { name: 'NSDecimalNumberExactnessException', type: '@' },
     { name: 'NSDecimalNumberOverflowException', type: '@' },
     { name: 'NSDecimalNumberUnderflowException', type: '@' },
     { name: 'NSDecimalSeparator', type: '@' },
     { name: 'NSDefaultRunLoopMode', type: '@' },
     { name: 'NSDestinationInvalidException', type: '@' },
     { name: 'NSDidBecomeSingleThreadedNotification', type: '@' },
     { name: 'NSDistinctUnionOfArraysKeyValueOperator', type: '@' },
     { name: 'NSDistinctUnionOfObjectsKeyValueOperator', type: '@' },
     { name: 'NSDistinctUnionOfSetsKeyValueOperator', type: '@' },
     { name: 'NSEarlierTimeDesignations', type: '@' },
     { name: 'NSErrorFailingURLStringKey', type: '@' },
     { name: 'NSFTPPropertyActiveTransferModeKey', type: '@' },
     { name: 'NSFTPPropertyFTPProxy', type: '@' },
     { name: 'NSFTPPropertyFileOffsetKey', type: '@' },
     { name: 'NSFTPPropertyUserLoginKey', type: '@' },
     { name: 'NSFTPPropertyUserPasswordKey', type: '@' },
     { name: 'NSFailedAuthenticationException', type: '@' },
     { name: 'NSFileAppendOnly', type: '@' },
     { name: 'NSFileBusy', type: '@' },
     { name: 'NSFileCreationDate', type: '@' },
     { name: 'NSFileDeviceIdentifier', type: '@' },
     { name: 'NSFileExtensionHidden', type: '@' },
     { name: 'NSFileGroupOwnerAccountID', type: '@' },
     { name: 'NSFileGroupOwnerAccountName', type: '@' },
     { name: 'NSFileHFSCreatorCode', type: '@' },
     { name: 'NSFileHFSTypeCode', type: '@' },
     { name: 'NSFileHandleConnectionAcceptedNotification',
       type: '@' },
     { name: 'NSFileHandleDataAvailableNotification', type: '@' },
     { name: 'NSFileHandleNotificationDataItem', type: '@' },
     { name: 'NSFileHandleNotificationFileHandleItem', type: '@' },
     { name: 'NSFileHandleNotificationMonitorModes', type: '@' },
     { name: 'NSFileHandleOperationException', type: '@' },
     { name: 'NSFileHandleReadCompletionNotification', type: '@' },
     { name: 'NSFileHandleReadToEndOfFileCompletionNotification',
       type: '@' },
     { name: 'NSFileImmutable', type: '@' },
     { name: 'NSFileModificationDate', type: '@' },
     { name: 'NSFileOwnerAccountID', type: '@' },
     { name: 'NSFileOwnerAccountName', type: '@' },
     { name: 'NSFilePathErrorKey', type: '@' },
     { name: 'NSFilePosixPermissions', type: '@' },
     { name: 'NSFileReferenceCount', type: '@' },
     { name: 'NSFileSize', type: '@' },
     { name: 'NSFileSystemFileNumber', type: '@' },
     { name: 'NSFileSystemFreeNodes', type: '@' },
     { name: 'NSFileSystemFreeSize', type: '@' },
     { name: 'NSFileSystemNodes', type: '@' },
     { name: 'NSFileSystemNumber', type: '@' },
     { name: 'NSFileSystemSize', type: '@' },
     { name: 'NSFileType', type: '@' },
     { name: 'NSFileTypeBlockSpecial', type: '@' },
     { name: 'NSFileTypeCharacterSpecial', type: '@' },
     { name: 'NSFileTypeDirectory', type: '@' },
     { name: 'NSFileTypeRegular', type: '@' },
     { name: 'NSFileTypeSocket', type: '@' },
     { name: 'NSFileTypeSymbolicLink', type: '@' },
     { name: 'NSFileTypeUnknown', type: '@' },
     { name: 'NSFoundationVersionNumber', type: 'd' },
     { name: 'NSGenericException', type: '@' },
     { name: 'NSGlobalDomain', type: '@' },
     { name: 'NSGrammarCorrections', type: '@' },
     { name: 'NSGrammarRange', type: '@' },
     { name: 'NSGrammarUserDescription', type: '@' },
     { name: 'NSGregorianCalendar', type: '@' },
     { name: 'NSHTTPCookieComment', type: '@' },
     { name: 'NSHTTPCookieCommentURL', type: '@' },
     { name: 'NSHTTPCookieDiscard', type: '@' },
     { name: 'NSHTTPCookieDomain', type: '@' },
     { name: 'NSHTTPCookieExpires', type: '@' },
     { name: 'NSHTTPCookieManagerAcceptPolicyChangedNotification',
       type: '@' },
     { name: 'NSHTTPCookieManagerCookiesChangedNotification',
       type: '@' },
     { name: 'NSHTTPCookieMaximumAge', type: '@' },
     { name: 'NSHTTPCookieName', type: '@' },
     { name: 'NSHTTPCookieOriginURL', type: '@' },
     { name: 'NSHTTPCookiePath', type: '@' },
     { name: 'NSHTTPCookiePort', type: '@' },
     { name: 'NSHTTPCookieSecure', type: '@' },
     { name: 'NSHTTPCookieValue', type: '@' },
     { name: 'NSHTTPCookieVersion', type: '@' },
     { name: 'NSHTTPPropertyErrorPageDataKey', type: '@' },
     { name: 'NSHTTPPropertyHTTPProxy', type: '@' },
     { name: 'NSHTTPPropertyRedirectionHeadersKey', type: '@' },
     { name: 'NSHTTPPropertyServerHTTPVersionKey', type: '@' },
     { name: 'NSHTTPPropertyStatusCodeKey', type: '@' },
     { name: 'NSHTTPPropertyStatusReasonKey', type: '@' },
     { name: 'NSHebrewCalendar', type: '@' },
     { name: 'NSHelpAnchorErrorKey', type: '@' },
     { name: 'NSHourNameDesignations', type: '@' },
     { name: 'NSISO8601Calendar', type: '@' },
     { name: 'NSInconsistentArchiveException', type: '@' },
     { name: 'NSIndianCalendar', type: '@' },
     { name: 'NSIntHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSIntMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSIntMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSIntegerHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSIntegerMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSIntegerMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSInternalInconsistencyException', type: '@' },
     { name: 'NSInternationalCurrencyString', type: '@' },
     { name: 'NSInvalidArchiveOperationException', type: '@' },
     { name: 'NSInvalidArgumentException', type: '@' },
     { name: 'NSInvalidReceivePortException', type: '@' },
     { name: 'NSInvalidSendPortException', type: '@' },
     { name: 'NSInvalidUnarchiveOperationException', type: '@' },
     { name: 'NSInvocationOperationCancelledException', type: '@' },
     { name: 'NSInvocationOperationVoidResultException', type: '@' },
     { name: 'NSIsNilTransformerName', type: '@' },
     { name: 'NSIsNotNilTransformerName', type: '@' },
     { name: 'NSIslamicCalendar', type: '@' },
     { name: 'NSIslamicCivilCalendar', type: '@' },
     { name: 'NSJapaneseCalendar', type: '@' },
     { name: 'NSKeepAllocationStatistics', type: 'B' },
     { name: 'NSKeyValueChangeIndexesKey', type: '@' },
     { name: 'NSKeyValueChangeKindKey', type: '@' },
     { name: 'NSKeyValueChangeNewKey', type: '@' },
     { name: 'NSKeyValueChangeNotificationIsPriorKey', type: '@' },
     { name: 'NSKeyValueChangeOldKey', type: '@' },
     { name: 'NSKeyedUnarchiveFromDataTransformerName', type: '@' },
     { name: 'NSLaterTimeDesignations', type: '@' },
     { name: 'NSLinguisticTagAdjective', type: '@' },
     { name: 'NSLinguisticTagAdverb', type: '@' },
     { name: 'NSLinguisticTagClassifier', type: '@' },
     { name: 'NSLinguisticTagCloseParenthesis', type: '@' },
     { name: 'NSLinguisticTagCloseQuote', type: '@' },
     { name: 'NSLinguisticTagConjunction', type: '@' },
     { name: 'NSLinguisticTagDash', type: '@' },
     { name: 'NSLinguisticTagDeterminer', type: '@' },
     { name: 'NSLinguisticTagIdiom', type: '@' },
     { name: 'NSLinguisticTagInterjection', type: '@' },
     { name: 'NSLinguisticTagNoun', type: '@' },
     { name: 'NSLinguisticTagNumber', type: '@' },
     { name: 'NSLinguisticTagOpenParenthesis', type: '@' },
     { name: 'NSLinguisticTagOpenQuote', type: '@' },
     { name: 'NSLinguisticTagOrganizationName', type: '@' },
     { name: 'NSLinguisticTagOther', type: '@' },
     { name: 'NSLinguisticTagOtherPunctuation', type: '@' },
     { name: 'NSLinguisticTagOtherWhitespace', type: '@' },
     { name: 'NSLinguisticTagOtherWord', type: '@' },
     { name: 'NSLinguisticTagParagraphBreak', type: '@' },
     { name: 'NSLinguisticTagParticle', type: '@' },
     { name: 'NSLinguisticTagPersonalName', type: '@' },
     { name: 'NSLinguisticTagPlaceName', type: '@' },
     { name: 'NSLinguisticTagPreposition', type: '@' },
     { name: 'NSLinguisticTagPronoun', type: '@' },
     { name: 'NSLinguisticTagPunctuation', type: '@' },
     { name: 'NSLinguisticTagSchemeLanguage', type: '@' },
     { name: 'NSLinguisticTagSchemeLemma', type: '@' },
     { name: 'NSLinguisticTagSchemeLexicalClass', type: '@' },
     { name: 'NSLinguisticTagSchemeNameType', type: '@' },
     { name: 'NSLinguisticTagSchemeNameTypeOrLexicalClass',
       type: '@' },
     { name: 'NSLinguisticTagSchemeScript', type: '@' },
     { name: 'NSLinguisticTagSchemeTokenType', type: '@' },
     { name: 'NSLinguisticTagSentenceTerminator', type: '@' },
     { name: 'NSLinguisticTagVerb', type: '@' },
     { name: 'NSLinguisticTagWhitespace', type: '@' },
     { name: 'NSLinguisticTagWord', type: '@' },
     { name: 'NSLinguisticTagWordJoiner', type: '@' },
     { name: 'NSLoadedClasses', type: '@' },
     { name: 'NSLocalNotificationCenterType', type: '@' },
     { name: 'NSLocaleAlternateQuotationBeginDelimiterKey',
       type: '@' },
     { name: 'NSLocaleAlternateQuotationEndDelimiterKey', type: '@' },
     { name: 'NSLocaleCalendar', type: '@' },
     { name: 'NSLocaleCollationIdentifier', type: '@' },
     { name: 'NSLocaleCollatorIdentifier', type: '@' },
     { name: 'NSLocaleCountryCode', type: '@' },
     { name: 'NSLocaleCurrencyCode', type: '@' },
     { name: 'NSLocaleCurrencySymbol', type: '@' },
     { name: 'NSLocaleDecimalSeparator', type: '@' },
     { name: 'NSLocaleExemplarCharacterSet', type: '@' },
     { name: 'NSLocaleGroupingSeparator', type: '@' },
     { name: 'NSLocaleIdentifier', type: '@' },
     { name: 'NSLocaleLanguageCode', type: '@' },
     { name: 'NSLocaleMeasurementSystem', type: '@' },
     { name: 'NSLocaleQuotationBeginDelimiterKey', type: '@' },
     { name: 'NSLocaleQuotationEndDelimiterKey', type: '@' },
     { name: 'NSLocaleScriptCode', type: '@' },
     { name: 'NSLocaleUsesMetricSystem', type: '@' },
     { name: 'NSLocaleVariantCode', type: '@' },
     { name: 'NSLocalizedDescriptionKey', type: '@' },
     { name: 'NSLocalizedFailureReasonErrorKey', type: '@' },
     { name: 'NSLocalizedRecoveryOptionsErrorKey', type: '@' },
     { name: 'NSLocalizedRecoverySuggestionErrorKey', type: '@' },
     { name: 'NSMachErrorDomain', type: '@' },
     { name: 'NSMallocException', type: '@' },
     { name: 'NSMaximumKeyValueOperator', type: '@' },
     { name: 'NSMetadataItemDisplayNameKey', type: '@' },
     { name: 'NSMetadataItemFSContentChangeDateKey', type: '@' },
     { name: 'NSMetadataItemFSCreationDateKey', type: '@' },
     { name: 'NSMetadataItemFSNameKey', type: '@' },
     { name: 'NSMetadataItemFSSizeKey', type: '@' },
     { name: 'NSMetadataItemIsUbiquitousKey', type: '@' },
     { name: 'NSMetadataItemPathKey', type: '@' },
     { name: 'NSMetadataItemURLKey', type: '@' },
     { name: 'NSMetadataQueryDidFinishGatheringNotification',
       type: '@' },
     { name: 'NSMetadataQueryDidStartGatheringNotification',
       type: '@' },
     { name: 'NSMetadataQueryDidUpdateNotification', type: '@' },
     { name: 'NSMetadataQueryGatheringProgressNotification',
       type: '@' },
     { name: 'NSMetadataQueryLocalComputerScope', type: '@' },
     { name: 'NSMetadataQueryNetworkScope', type: '@' },
     { name: 'NSMetadataQueryResultContentRelevanceAttribute',
       type: '@' },
     { name: 'NSMetadataQueryUbiquitousDataScope', type: '@' },
     { name: 'NSMetadataQueryUbiquitousDocumentsScope', type: '@' },
     { name: 'NSMetadataQueryUserHomeScope', type: '@' },
     { name: 'NSMetadataUbiquitousItemHasUnresolvedConflictsKey',
       type: '@' },
     { name: 'NSMetadataUbiquitousItemIsDownloadedKey', type: '@' },
     { name: 'NSMetadataUbiquitousItemIsDownloadingKey', type: '@' },
     { name: 'NSMetadataUbiquitousItemIsUploadedKey', type: '@' },
     { name: 'NSMetadataUbiquitousItemIsUploadingKey', type: '@' },
     { name: 'NSMetadataUbiquitousItemPercentDownloadedKey',
       type: '@' },
     { name: 'NSMetadataUbiquitousItemPercentUploadedKey',
       type: '@' },
     { name: 'NSMinimumKeyValueOperator', type: '@' },
     { name: 'NSMonthNameArray', type: '@' },
     { name: 'NSNegateBooleanTransformerName', type: '@' },
     { name: 'NSNegativeCurrencyFormatString', type: '@' },
     { name: 'NSNetServicesErrorCode', type: '@' },
     { name: 'NSNetServicesErrorDomain', type: '@' },
     { name: 'NSNextDayDesignations', type: '@' },
     { name: 'NSNextNextDayDesignations', type: '@' },
     { name: 'NSNonOwnedPointerHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSNonOwnedPointerMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSNonOwnedPointerMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSNonOwnedPointerOrNullMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSNonRetainedObjectHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSNonRetainedObjectMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSNonRetainedObjectMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSOSStatusErrorDomain', type: '@' },
     { name: 'NSObjectHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSObjectInaccessibleException', type: '@' },
     { name: 'NSObjectMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSObjectMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSObjectNotAvailableException', type: '@' },
     { name: 'NSOldStyleException', type: '@' },
     { name: 'NSOperationNotSupportedForKeyException', type: '@' },
     { name: 'NSOwnedObjectIdentityHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSOwnedPointerHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSOwnedPointerMapKeyCallBacks',
       type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
     { name: 'NSOwnedPointerMapValueCallBacks',
       type: '{_NSMapTableValueCallBacks=^?^?^?}' },
     { name: 'NSPOSIXErrorDomain', type: '@' },
     { name: 'NSParseErrorException', type: '@' },
     { name: 'NSPersianCalendar', type: '@' },
     { name: 'NSPointerToStructHashCallBacks',
       type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
     { name: 'NSPortDidBecomeInvalidNotification', type: '@' },
     { name: 'NSPortReceiveException', type: '@' },
     { name: 'NSPortSendException', type: '@' },
     { name: 'NSPortTimeoutException', type: '@' },
     { name: 'NSPositiveCurrencyFormatString', type: '@' },
     { name: 'NSPriorDayDesignations', type: '@' },
     { name: 'NSRangeException', type: '@' },
     { name: 'NSRecoveryAttempterErrorKey', type: '@' },
     { name: 'NSRegistrationDomain', type: '@' },
     { name: 'NSRepublicOfChinaCalendar', type: '@' },
     { name: 'NSRunLoopCommonModes', type: '@' },
     { name: 'NSShortDateFormatString', type: '@' },
     { name: 'NSShortMonthNameArray', type: '@' },
     { name: 'NSShortTimeDateFormatString', type: '@' },
     { name: 'NSShortWeekDayNameArray', type: '@' },
     { name: 'NSStreamDataWrittenToMemoryStreamKey', type: '@' },
     { name: 'NSStreamFileCurrentOffsetKey', type: '@' },
     { name: 'NSStreamNetworkServiceType', type: '@' },
     { name: 'NSStreamNetworkServiceTypeBackground', type: '@' },
     { name: 'NSStreamNetworkServiceTypeVideo', type: '@' },
     { name: 'NSStreamNetworkServiceTypeVoIP', type: '@' },
     { name: 'NSStreamNetworkServiceTypeVoice', type: '@' },
     { name: 'NSStreamSOCKSErrorDomain', type: '@' },
     { name: 'NSStreamSOCKSProxyConfigurationKey', type: '@' },
     { name: 'NSStreamSOCKSProxyHostKey', type: '@' },
     { name: 'NSStreamSOCKSProxyPasswordKey', type: '@' },
     { name: 'NSStreamSOCKSProxyPortKey', type: '@' },
     { name: 'NSStreamSOCKSProxyUserKey', type: '@' },
     { name: 'NSStreamSOCKSProxyVersion4', type: '@' },
     { name: 'NSStreamSOCKSProxyVersion5', type: '@' },
     { name: 'NSStreamSOCKSProxyVersionKey', type: '@' },
     { name: 'NSStreamSocketSSLErrorDomain', type: '@' },
     { name: 'NSStreamSocketSecurityLevelKey', type: '@' },
     { name: 'NSStreamSocketSecurityLevelNegotiatedSSL', type: '@' },
     { name: 'NSStreamSocketSecurityLevelNone', type: '@' },
     { name: 'NSStreamSocketSecurityLevelSSLv2', type: '@' },
     { name: 'NSStreamSocketSecurityLevelSSLv3', type: '@' },
     { name: 'NSStreamSocketSecurityLevelTLSv1', type: '@' },
     { name: 'NSStringEncodingErrorKey', type: '@' },
     { name: 'NSSumKeyValueOperator', type: '@' },
     { name: 'NSSystemClockDidChangeNotification', type: '@' },
     { name: 'NSSystemTimeZoneDidChangeNotification', type: '@' },
     { name: 'NSTaskDidTerminateNotification', type: '@' },
     { name: 'NSTextCheckingAirlineKey', type: '@' },
     { name: 'NSTextCheckingCityKey', type: '@' },
     { name: 'NSTextCheckingCountryKey', type: '@' },
     { name: 'NSTextCheckingFlightKey', type: '@' },
     { name: 'NSTextCheckingJobTitleKey', type: '@' },
     { name: 'NSTextCheckingNameKey', type: '@' },
     { name: 'NSTextCheckingOrganizationKey', type: '@' },
     { name: 'NSTextCheckingPhoneKey', type: '@' },
     { name: 'NSTextCheckingStateKey', type: '@' },
     { name: 'NSTextCheckingStreetKey', type: '@' },
     { name: 'NSTextCheckingZIPKey', type: '@' },
     { name: 'NSThisDayDesignations', type: '@' },
     { name: 'NSThousandsSeparator', type: '@' },
     { name: 'NSThreadWillExitNotification', type: '@' },
     { name: 'NSTimeDateFormatString', type: '@' },
     { name: 'NSTimeFormatString', type: '@' },
     { name: 'NSURLAttributeModificationDateKey', type: '@' },
     { name: 'NSURLAuthenticationMethodClientCertificate',
       type: '@' },
     { name: 'NSURLAuthenticationMethodDefault', type: '@' },
     { name: 'NSURLAuthenticationMethodHTMLForm', type: '@' },
     { name: 'NSURLAuthenticationMethodHTTPBasic', type: '@' },
     { name: 'NSURLAuthenticationMethodHTTPDigest', type: '@' },
     { name: 'NSURLAuthenticationMethodNTLM', type: '@' },
     { name: 'NSURLAuthenticationMethodNegotiate', type: '@' },
     { name: 'NSURLAuthenticationMethodServerTrust', type: '@' },
     { name: 'NSURLContentAccessDateKey', type: '@' },
     { name: 'NSURLContentModificationDateKey', type: '@' },
     { name: 'NSURLCreationDateKey', type: '@' },
     { name: 'NSURLCredentialStorageChangedNotification', type: '@' },
     { name: 'NSURLCustomIconKey', type: '@' },
     { name: 'NSURLEffectiveIconKey', type: '@' },
     { name: 'NSURLErrorDomain', type: '@' },
     { name: 'NSURLErrorFailingURLErrorKey', type: '@' },
     { name: 'NSURLErrorFailingURLPeerTrustErrorKey', type: '@' },
     { name: 'NSURLErrorFailingURLStringErrorKey', type: '@' },
     { name: 'NSURLErrorKey', type: '@' },
     { name: 'NSURLFileAllocatedSizeKey', type: '@' },
     { name: 'NSURLFileResourceIdentifierKey', type: '@' },
     { name: 'NSURLFileResourceTypeBlockSpecial', type: '@' },
     { name: 'NSURLFileResourceTypeCharacterSpecial', type: '@' },
     { name: 'NSURLFileResourceTypeDirectory', type: '@' },
     { name: 'NSURLFileResourceTypeKey', type: '@' },
     { name: 'NSURLFileResourceTypeNamedPipe', type: '@' },
     { name: 'NSURLFileResourceTypeRegular', type: '@' },
     { name: 'NSURLFileResourceTypeSocket', type: '@' },
     { name: 'NSURLFileResourceTypeSymbolicLink', type: '@' },
     { name: 'NSURLFileResourceTypeUnknown', type: '@' },
     { name: 'NSURLFileScheme', type: '@' },
     { name: 'NSURLFileSecurityKey', type: '@' },
     { name: 'NSURLFileSizeKey', type: '@' },
     { name: 'NSURLHasHiddenExtensionKey', type: '@' },
     { name: 'NSURLIsAliasFileKey', type: '@' },
     { name: 'NSURLIsDirectoryKey', type: '@' },
     { name: 'NSURLIsExecutableKey', type: '@' },
     { name: 'NSURLIsHiddenKey', type: '@' },
     { name: 'NSURLIsMountTriggerKey', type: '@' },
     { name: 'NSURLIsPackageKey', type: '@' },
     { name: 'NSURLIsReadableKey', type: '@' },
     { name: 'NSURLIsRegularFileKey', type: '@' },
     { name: 'NSURLIsSymbolicLinkKey', type: '@' },
     { name: 'NSURLIsSystemImmutableKey', type: '@' },
     { name: 'NSURLIsUbiquitousItemKey', type: '@' },
     { name: 'NSURLIsUserImmutableKey', type: '@' },
     { name: 'NSURLIsVolumeKey', type: '@' },
     { name: 'NSURLIsWritableKey', type: '@' },
     { name: 'NSURLKeysOfUnsetValuesKey', type: '@' },
     { name: 'NSURLLabelColorKey', type: '@' },
     { name: 'NSURLLabelNumberKey', type: '@' },
     { name: 'NSURLLinkCountKey', type: '@' },
     { name: 'NSURLLocalizedLabelKey', type: '@' },
     { name: 'NSURLLocalizedNameKey', type: '@' },
     { name: 'NSURLLocalizedTypeDescriptionKey', type: '@' },
     { name: 'NSURLNameKey', type: '@' },
     { name: 'NSURLParentDirectoryURLKey', type: '@' },
     { name: 'NSURLPreferredIOBlockSizeKey', type: '@' },
     { name: 'NSURLProtectionSpaceFTP', type: '@' },
     { name: 'NSURLProtectionSpaceFTPProxy', type: '@' },
     { name: 'NSURLProtectionSpaceHTTP', type: '@' },
     { name: 'NSURLProtectionSpaceHTTPProxy', type: '@' },
     { name: 'NSURLProtectionSpaceHTTPS', type: '@' },
     { name: 'NSURLProtectionSpaceHTTPSProxy', type: '@' },
     { name: 'NSURLProtectionSpaceSOCKSProxy', type: '@' },
     { name: 'NSURLTotalFileAllocatedSizeKey', type: '@' },
     { name: 'NSURLTotalFileSizeKey', type: '@' },
     { name: 'NSURLTypeIdentifierKey', type: '@' },
     { name: 'NSURLUbiquitousItemHasUnresolvedConflictsKey',
       type: '@' },
     { name: 'NSURLUbiquitousItemIsDownloadedKey', type: '@' },
     { name: 'NSURLUbiquitousItemIsDownloadingKey', type: '@' },
     { name: 'NSURLUbiquitousItemIsUploadedKey', type: '@' },
     { name: 'NSURLUbiquitousItemIsUploadingKey', type: '@' },
     { name: 'NSURLUbiquitousItemPercentDownloadedKey', type: '@' },
     { name: 'NSURLUbiquitousItemPercentUploadedKey', type: '@' },
     { name: 'NSURLVolumeAvailableCapacityKey', type: '@' },
     { name: 'NSURLVolumeCreationDateKey', type: '@' },
     { name: 'NSURLVolumeIdentifierKey', type: '@' },
     { name: 'NSURLVolumeIsAutomountedKey', type: '@' },
     { name: 'NSURLVolumeIsBrowsableKey', type: '@' },
     { name: 'NSURLVolumeIsEjectableKey', type: '@' },
     { name: 'NSURLVolumeIsInternalKey', type: '@' },
     { name: 'NSURLVolumeIsJournalingKey', type: '@' },
     { name: 'NSURLVolumeIsLocalKey', type: '@' },
     { name: 'NSURLVolumeIsReadOnlyKey', type: '@' },
     { name: 'NSURLVolumeIsRemovableKey', type: '@' },
     { name: 'NSURLVolumeLocalizedFormatDescriptionKey', type: '@' },
     { name: 'NSURLVolumeLocalizedNameKey', type: '@' },
     { name: 'NSURLVolumeMaximumFileSizeKey', type: '@' },
     { name: 'NSURLVolumeNameKey', type: '@' },
     { name: 'NSURLVolumeResourceCountKey', type: '@' },
     { name: 'NSURLVolumeSupportsAdvisoryFileLockingKey', type: '@' },
     { name: 'NSURLVolumeSupportsCasePreservedNamesKey', type: '@' },
     { name: 'NSURLVolumeSupportsCaseSensitiveNamesKey', type: '@' },
     { name: 'NSURLVolumeSupportsExtendedSecurityKey', type: '@' },
     { name: 'NSURLVolumeSupportsHardLinksKey', type: '@' },
     { name: 'NSURLVolumeSupportsJournalingKey', type: '@' },
     { name: 'NSURLVolumeSupportsPersistentIDsKey', type: '@' },
     { name: 'NSURLVolumeSupportsRenamingKey', type: '@' },
     { name: 'NSURLVolumeSupportsRootDirectoryDatesKey', type: '@' },
     { name: 'NSURLVolumeSupportsSparseFilesKey', type: '@' },
     { name: 'NSURLVolumeSupportsSymbolicLinksKey', type: '@' },
     { name: 'NSURLVolumeSupportsVolumeSizesKey', type: '@' },
     { name: 'NSURLVolumeSupportsZeroRunsKey', type: '@' },
     { name: 'NSURLVolumeTotalCapacityKey', type: '@' },
     { name: 'NSURLVolumeURLForRemountingKey', type: '@' },
     { name: 'NSURLVolumeURLKey', type: '@' },
     { name: 'NSURLVolumeUUIDStringKey', type: '@' },
     { name: 'NSUbiquitousKeyValueStoreChangeReasonKey', type: '@' },
     { name: 'NSUbiquitousKeyValueStoreChangedKeysKey', type: '@' },
     { name: 'NSUbiquitousKeyValueStoreDidChangeExternallyNotification',
       type: '@' },
     { name: 'NSUnarchiveFromDataTransformerName', type: '@' },
     { name: 'NSUndefinedKeyException', type: '@' },
     { name: 'NSUnderlyingErrorKey', type: '@' },
     { name: 'NSUndoManagerCheckpointNotification', type: '@' },
     { name: 'NSUndoManagerDidCloseUndoGroupNotification',
       type: '@' },
     { name: 'NSUndoManagerDidOpenUndoGroupNotification', type: '@' },
     { name: 'NSUndoManagerDidRedoChangeNotification', type: '@' },
     { name: 'NSUndoManagerDidUndoChangeNotification', type: '@' },
     { name: 'NSUndoManagerGroupIsDiscardableKey', type: '@' },
     { name: 'NSUndoManagerWillCloseUndoGroupNotification',
       type: '@' },
     { name: 'NSUndoManagerWillRedoChangeNotification', type: '@' },
     { name: 'NSUndoManagerWillUndoChangeNotification', type: '@' },
     { name: 'NSUnionOfArraysKeyValueOperator', type: '@' },
     { name: 'NSUnionOfObjectsKeyValueOperator', type: '@' },
     { name: 'NSUnionOfSetsKeyValueOperator', type: '@' },
     { name: 'NSUserDefaultsDidChangeNotification', type: '@' },
     { name: 'NSWeekDayNameArray', type: '@' },
     { name: 'NSWillBecomeMultiThreadedNotification', type: '@' },
     { name: 'NSXMLParserErrorDomain', type: '@' },
     { name: 'NSYearMonthWeekDesignations', type: '@' },
     { name: 'NSZeroPoint',
       type64: '{CGPoint=dd}',
       type: '{_NSPoint=ff}' },
     { name: 'NSZeroRect',
       type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
       type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
     { name: 'NSZeroSize',
       type64: '{CGSize=dd}',
       type: '{_NSSize=ff}' },
     { name: 'NSZombieEnabled', type: 'B' } ],
  enum: 
   [ { name: 'NSASCIIStringEncoding', value: '1' },
     { name: 'NSAdminApplicationDirectory', value: '4' },
     { name: 'NSAggregateExpressionType', value: '14' },
     { name: 'NSAlignAllEdgesInward', value: '15' },
     { name: 'NSAlignAllEdgesNearest', value: '983040' },
     { name: 'NSAlignAllEdgesOutward', value: '3840' },
     { name: 'NSAlignHeightInward', value: '32' },
     { name: 'NSAlignHeightNearest', value: '2097152' },
     { name: 'NSAlignHeightOutward', value: '8192' },
     { name: 'NSAlignMaxXInward', value: '4' },
     { name: 'NSAlignMaxXNearest', value: '262144' },
     { name: 'NSAlignMaxXOutward', value: '1024' },
     { name: 'NSAlignMaxYInward', value: '8' },
     { name: 'NSAlignMaxYNearest', value: '524288' },
     { name: 'NSAlignMaxYOutward', value: '2048' },
     { name: 'NSAlignMinXInward', value: '1' },
     { name: 'NSAlignMinXNearest', value: '65536' },
     { name: 'NSAlignMinXOutward', value: '256' },
     { name: 'NSAlignMinYInward', value: '2' },
     { name: 'NSAlignMinYNearest', value: '131072' },
     { name: 'NSAlignMinYOutward', value: '512' },
     { name: 'NSAlignRectFlipped', value: '9223372036854775808' },
     { name: 'NSAlignWidthInward', value: '16' },
     { name: 'NSAlignWidthNearest', value: '1048576' },
     { name: 'NSAlignWidthOutward', value: '4096' },
     { name: 'NSAllApplicationsDirectory', value: '100' },
     { name: 'NSAllDomainsMask', value: '65535' },
     { name: 'NSAllLibrariesDirectory', value: '101' },
     { name: 'NSAllPredicateModifier', value: '1' },
     { name: 'NSAnchoredSearch', value: '8' },
     { name: 'NSAndPredicateType', value: '1' },
     { name: 'NSAnyPredicateModifier', value: '2' },
     { name: 'NSApplicationDirectory', value: '1' },
     { name: 'NSApplicationSupportDirectory', value: '14' },
     { name: 'NSArgumentEvaluationScriptError', value: '3' },
     { name: 'NSArgumentsWrongScriptError', value: '6' },
     { name: 'NSAtomicWrite', value: '1' },
     { name: 'NSAttributedStringEnumerationLongestEffectiveRangeNotRequired',
       value: '1048576' },
     { name: 'NSAttributedStringEnumerationReverse', value: '2' },
     { name: 'NSAutosavedInformationDirectory', value: '11' },
     { name: 'NSBackwardsSearch', value: '4' },
     { name: 'NSBeginsWithComparison', value: '5' },
     { name: 'NSBeginsWithPredicateOperatorType', value: '8' },
     { name: 'NSBetweenPredicateOperatorType', value: '100' },
     { name: 'NSBinarySearchingFirstEqual', value: '256' },
     { name: 'NSBinarySearchingInsertionIndex', value: '1024' },
     { name: 'NSBinarySearchingLastEqual', value: '512' },
     { name: 'NSBlockExpressionType', value: '19' },
     { name: 'NSBundleExecutableArchitectureI386', value: '7' },
     { name: 'NSBundleExecutableArchitecturePPC', value: '18' },
     { name: 'NSBundleExecutableArchitecturePPC64',
       value: '16777234' },
     { name: 'NSBundleExecutableArchitectureX86_64',
       value: '16777223' },
     { name: 'NSCachesDirectory', value: '13' },
     { name: 'NSCalculationDivideByZero', value: '4' },
     { name: 'NSCalculationLossOfPrecision', value: '1' },
     { name: 'NSCalculationNoError', value: '0' },
     { name: 'NSCalculationOverflow', value: '3' },
     { name: 'NSCalculationUnderflow', value: '2' },
     { name: 'NSCalendarCalendarUnit', value: '1048576' },
     { name: 'NSCannotCreateScriptCommandError', value: '10' },
     { name: 'NSCaseInsensitivePredicateOption', value: '1' },
     { name: 'NSCaseInsensitiveSearch', value: '1' },
     { name: 'NSCollectorDisabledOption', value: '2' },
     { name: 'NSConstantValueExpressionType', value: '0' },
     { name: 'NSContainerSpecifierError', value: '2' },
     { name: 'NSContainsComparison', value: '7' },
     { name: 'NSContainsPredicateOperatorType', value: '99' },
     { name: 'NSCoreServiceDirectory', value: '10' },
     { name: 'NSCustomSelectorPredicateOperatorType', value: '11' },
     { name: 'NSDataReadingMapped', value: '1' },
     { name: 'NSDataReadingMappedAlways', value: '8' },
     { name: 'NSDataReadingMappedIfSafe', value: '1' },
     { name: 'NSDataReadingUncached', value: '2' },
     { name: 'NSDataSearchAnchored', value: '2' },
     { name: 'NSDataSearchBackwards', value: '1' },
     { name: 'NSDataWritingAtomic', value: '1' },
     { name: 'NSDateFormatterBehavior10_0', value: '1000' },
     { name: 'NSDateFormatterBehavior10_4', value: '1040' },
     { name: 'NSDateFormatterBehaviorDefault', value: '0' },
     { name: 'NSDateFormatterFullStyle', value: '4' },
     { name: 'NSDateFormatterLongStyle', value: '3' },
     { name: 'NSDateFormatterMediumStyle', value: '2' },
     { name: 'NSDateFormatterNoStyle', value: '0' },
     { name: 'NSDateFormatterShortStyle', value: '1' },
     { name: 'NSDayCalendarUnit', value: '16' },
     { name: 'NSDecimalMaxSize', value: '8' },
     { name: 'NSDecimalNoScale', value: '32767' },
     { name: 'NSDemoApplicationDirectory', value: '2' },
     { name: 'NSDesktopDirectory', value: '12' },
     { name: 'NSDeveloperApplicationDirectory', value: '3' },
     { name: 'NSDeveloperDirectory', value: '6' },
     { name: 'NSDiacriticInsensitivePredicateOption', value: '2' },
     { name: 'NSDiacriticInsensitiveSearch', value: '128' },
     { name: 'NSDirectPredicateModifier', value: '0' },
     { name: 'NSDirectoryEnumerationSkipsHiddenFiles', value: '4' },
     { name: 'NSDirectoryEnumerationSkipsPackageDescendants',
       value: '2' },
     { name: 'NSDirectoryEnumerationSkipsSubdirectoryDescendants',
       value: '1' },
     { name: 'NSDocumentDirectory', value: '9' },
     { name: 'NSDocumentationDirectory', value: '8' },
     { name: 'NSDownloadsDirectory', value: '15' },
     { name: 'NSEndsWithComparison', value: '6' },
     { name: 'NSEndsWithPredicateOperatorType', value: '9' },
     { name: 'NSEnumerationConcurrent', value: '1' },
     { name: 'NSEnumerationReverse', value: '2' },
     { name: 'NSEqualToComparison', value: '0' },
     { name: 'NSEqualToPredicateOperatorType', value: '4' },
     { name: 'NSEraCalendarUnit', value: '2' },
     { name: 'NSEvaluatedObjectExpressionType', value: '1' },
     { name: 'NSEverySubelement', value: '1' },
     { name: 'NSExecutableArchitectureMismatchError', value: '3585' },
     { name: 'NSExecutableErrorMaximum', value: '3839' },
     { name: 'NSExecutableErrorMinimum', value: '3584' },
     { name: 'NSExecutableLinkError', value: '3588' },
     { name: 'NSExecutableLoadError', value: '3587' },
     { name: 'NSExecutableNotLoadableError', value: '3584' },
     { name: 'NSExecutableRuntimeMismatchError', value: '3586' },
     { name: 'NSFileCoordinatorReadingResolvesSymbolicLink',
       value: '2' },
     { name: 'NSFileCoordinatorReadingWithoutChanges', value: '1' },
     { name: 'NSFileCoordinatorWritingForDeleting', value: '1' },
     { name: 'NSFileCoordinatorWritingForMerging', value: '4' },
     { name: 'NSFileCoordinatorWritingForMoving', value: '2' },
     { name: 'NSFileCoordinatorWritingForReplacing', value: '8' },
     { name: 'NSFileErrorMaximum', value: '1023' },
     { name: 'NSFileErrorMinimum', value: '0' },
     { name: 'NSFileLockingError', value: '255' },
     { name: 'NSFileManagerItemReplacementUsingNewMetadataOnly',
       value: '1' },
     { name: 'NSFileManagerItemReplacementWithoutDeletingBackupItem',
       value: '2' },
     { name: 'NSFileNoSuchFileError', value: '4' },
     { name: 'NSFileReadCorruptFileError', value: '259' },
     { name: 'NSFileReadInapplicableStringEncodingError',
       value: '261' },
     { name: 'NSFileReadInvalidFileNameError', value: '258' },
     { name: 'NSFileReadNoPermissionError', value: '257' },
     { name: 'NSFileReadNoSuchFileError', value: '260' },
     { name: 'NSFileReadTooLargeError', value: '263' },
     { name: 'NSFileReadUnknownError', value: '256' },
     { name: 'NSFileReadUnknownStringEncodingError', value: '264' },
     { name: 'NSFileReadUnsupportedSchemeError', value: '262' },
     { name: 'NSFileVersionAddingByMoving', value: '1' },
     { name: 'NSFileVersionReplacingByMoving', value: '1' },
     { name: 'NSFileWrapperReadingImmediate', value: '1' },
     { name: 'NSFileWrapperReadingWithoutMapping', value: '2' },
     { name: 'NSFileWrapperWritingAtomic', value: '1' },
     { name: 'NSFileWrapperWritingWithNameUpdating', value: '2' },
     { name: 'NSFileWriteFileExistsError', value: '516' },
     { name: 'NSFileWriteInapplicableStringEncodingError',
       value: '517' },
     { name: 'NSFileWriteInvalidFileNameError', value: '514' },
     { name: 'NSFileWriteNoPermissionError', value: '513' },
     { name: 'NSFileWriteOutOfSpaceError', value: '640' },
     { name: 'NSFileWriteUnknownError', value: '512' },
     { name: 'NSFileWriteUnsupportedSchemeError', value: '518' },
     { name: 'NSFileWriteVolumeReadOnlyError', value: '642' },
     { name: 'NSForcedOrderingSearch', value: '512' },
     { name: 'NSFormattingError', value: '2048' },
     { name: 'NSFormattingErrorMaximum', value: '2559' },
     { name: 'NSFormattingErrorMinimum', value: '2048' },
     { name: 'NSFoundationVersionNumber10_0', value: '397.40' },
     { name: 'NSFoundationVersionNumber10_1', value: '425.00' },
     { name: 'NSFoundationVersionNumber10_1_1', value: '425.00' },
     { name: 'NSFoundationVersionNumber10_1_2', value: '425.00' },
     { name: 'NSFoundationVersionNumber10_1_3', value: '425.00' },
     { name: 'NSFoundationVersionNumber10_1_4', value: '425.00' },
     { name: 'NSFoundationVersionNumber10_2', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_1', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_2', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_3', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_4', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_5', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_6', value: '462.00' },
     { name: 'NSFoundationVersionNumber10_2_7', value: '462.70' },
     { name: 'NSFoundationVersionNumber10_2_8', value: '462.70' },
     { name: 'NSFoundationVersionNumber10_3', value: '500.00' },
     { name: 'NSFoundationVersionNumber10_3_1', value: '500.00' },
     { name: 'NSFoundationVersionNumber10_3_2', value: '500.30' },
     { name: 'NSFoundationVersionNumber10_3_3', value: '500.54' },
     { name: 'NSFoundationVersionNumber10_3_4', value: '500.56' },
     { name: 'NSFoundationVersionNumber10_3_5', value: '500.56' },
     { name: 'NSFoundationVersionNumber10_3_6', value: '500.56' },
     { name: 'NSFoundationVersionNumber10_3_7', value: '500.56' },
     { name: 'NSFoundationVersionNumber10_3_8', value: '500.56' },
     { name: 'NSFoundationVersionNumber10_3_9', value: '500.58' },
     { name: 'NSFoundationVersionNumber10_4', value: '567.00' },
     { name: 'NSFoundationVersionNumber10_4_1', value: '567.00' },
     { name: 'NSFoundationVersionNumber10_4_10', value: '567.29' },
     { name: 'NSFoundationVersionNumber10_4_11', value: '567.36' },
     { name: 'NSFoundationVersionNumber10_4_2', value: '567.12' },
     { name: 'NSFoundationVersionNumber10_4_3', value: '567.21' },
     { name: 'NSFoundationVersionNumber10_4_4_Intel',
       value: '567.23' },
     { name: 'NSFoundationVersionNumber10_4_4_PowerPC',
       value: '567.21' },
     { name: 'NSFoundationVersionNumber10_4_5', value: '567.25' },
     { name: 'NSFoundationVersionNumber10_4_6', value: '567.26' },
     { name: 'NSFoundationVersionNumber10_4_7', value: '567.27' },
     { name: 'NSFoundationVersionNumber10_4_8', value: '567.28' },
     { name: 'NSFoundationVersionNumber10_4_9', value: '567.29' },
     { name: 'NSFoundationVersionNumber10_5', value: '677.00' },
     { name: 'NSFoundationVersionNumber10_5_1', value: '677.10' },
     { name: 'NSFoundationVersionNumber10_5_2', value: '677.15' },
     { name: 'NSFoundationVersionNumber10_5_3', value: '677.19' },
     { name: 'NSFoundationVersionNumber10_5_4', value: '677.19' },
     { name: 'NSFoundationVersionNumber10_5_5', value: '677.21' },
     { name: 'NSFoundationVersionNumber10_5_6', value: '677.22' },
     { name: 'NSFoundationVersionNumber10_5_7', value: '677.24' },
     { name: 'NSFoundationVersionNumber10_5_8', value: '677.26' },
     { name: 'NSFoundationVersionNumber10_6', value: '751.00' },
     { name: 'NSFoundationVersionNumber10_6_1', value: '751.00' },
     { name: 'NSFoundationVersionNumber10_6_2', value: '751.14' },
     { name: 'NSFoundationVersionNumber10_6_3', value: '751.21' },
     { name: 'NSFoundationVersionNumber10_6_4', value: '751.29' },
     { name: 'NSFoundationVersionNumber10_6_5', value: '751.42' },
     { name: 'NSFoundationVersionWithFileManagerResourceForkSupport',
       value: '412' },
     { name: 'NSFunctionExpressionType', value: '4' },
     { name: 'NSGEOMETRY_TYPES_SAME_AS_CGGEOMETRY_TYPES',
       value64: '1' },
     { name: 'NSGreaterThanComparison', value: '4' },
     { name: 'NSGreaterThanOrEqualToComparison', value: '3' },
     { name: 'NSGreaterThanOrEqualToPredicateOperatorType',
       value: '3' },
     { name: 'NSGreaterThanPredicateOperatorType', value: '2' },
     { name: 'NSHPUXOperatingSystem', value: '4' },
     { name: 'NSHTTPCookieAcceptPolicyAlways', value: '0' },
     { name: 'NSHTTPCookieAcceptPolicyNever', value: '1' },
     { name: 'NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain',
       value: '2' },
     { name: 'NSHashTableCopyIn', value: '65536' },
     { name: 'NSHashTableObjectPointerPersonality', value: '512' },
     { name: 'NSHashTableStrongMemory', value: '0' },
     { name: 'NSHashTableZeroingWeakMemory', value: '1' },
     { name: 'NSHourCalendarUnit', value: '32' },
     { name: 'NSINTEGER_DEFINED', value: '1' },
     { name: 'NSISO2022JPStringEncoding', value: '21' },
     { name: 'NSISOLatin1StringEncoding', value: '5' },
     { name: 'NSISOLatin2StringEncoding', value: '9' },
     { name: 'NSInPredicateOperatorType', value: '10' },
     { name: 'NSIndexSubelement', value: '0' },
     { name: 'NSInputMethodsDirectory', value: '16' },
     { name: 'NSIntegerMax',
       value64: '9223372036854775807',
       value: '2147483647' },
     { name: 'NSIntegerMin',
       value64: '-9223372036854775808',
       value: '-2147483648' },
     { name: 'NSInternalScriptError', value: '8' },
     { name: 'NSInternalSpecifierError', value: '5' },
     { name: 'NSIntersectSetExpressionType', value: '6' },
     { name: 'NSInvalidIndexSpecifierError', value: '4' },
     { name: 'NSItemReplacementDirectory', value: '99' },
     { name: 'NSJSONReadingAllowFragments', value: '4' },
     { name: 'NSJSONReadingMutableContainers', value: '1' },
     { name: 'NSJSONReadingMutableLeaves', value: '2' },
     { name: 'NSJSONWritingPrettyPrinted', value: '1' },
     { name: 'NSJapaneseEUCStringEncoding', value: '3' },
     { name: 'NSKeyPathExpressionType', value: '3' },
     { name: 'NSKeySpecifierEvaluationScriptError', value: '2' },
     { name: 'NSKeyValueChangeInsertion', value: '2' },
     { name: 'NSKeyValueChangeRemoval', value: '3' },
     { name: 'NSKeyValueChangeReplacement', value: '4' },
     { name: 'NSKeyValueChangeSetting', value: '1' },
     { name: 'NSKeyValueIntersectSetMutation', value: '3' },
     { name: 'NSKeyValueMinusSetMutation', value: '2' },
     { name: 'NSKeyValueObservingOptionInitial', value: '4' },
     { name: 'NSKeyValueObservingOptionNew', value: '1' },
     { name: 'NSKeyValueObservingOptionOld', value: '2' },
     { name: 'NSKeyValueObservingOptionPrior', value: '8' },
     { name: 'NSKeyValueSetSetMutation', value: '4' },
     { name: 'NSKeyValueUnionSetMutation', value: '1' },
     { name: 'NSKeyValueValidationError', value: '1024' },
     { name: 'NSLessThanComparison', value: '2' },
     { name: 'NSLessThanOrEqualToComparison', value: '1' },
     { name: 'NSLessThanOrEqualToPredicateOperatorType', value: '1' },
     { name: 'NSLessThanPredicateOperatorType', value: '0' },
     { name: 'NSLibraryDirectory', value: '5' },
     { name: 'NSLikePredicateOperatorType', value: '7' },
     { name: 'NSLinguisticTaggerJoinNames', value: '16' },
     { name: 'NSLinguisticTaggerOmitOther', value: '8' },
     { name: 'NSLinguisticTaggerOmitPunctuation', value: '2' },
     { name: 'NSLinguisticTaggerOmitWhitespace', value: '4' },
     { name: 'NSLinguisticTaggerOmitWords', value: '1' },
     { name: 'NSLiteralSearch', value: '2' },
     { name: 'NSLocalDomainMask', value: '2' },
     { name: 'NSLocaleLanguageDirectionBottomToTop', value: '4' },
     { name: 'NSLocaleLanguageDirectionLeftToRight', value: '1' },
     { name: 'NSLocaleLanguageDirectionRightToLeft', value: '2' },
     { name: 'NSLocaleLanguageDirectionTopToBottom', value: '3' },
     { name: 'NSLocaleLanguageDirectionUnknown', value: '0' },
     { name: 'NSMACHOperatingSystem', value: '5' },
     { name: 'NSMacOSRomanStringEncoding', value: '30' },
     { name: 'NSMachPortDeallocateNone', value: '0' },
     { name: 'NSMachPortDeallocateReceiveRight', value: '2' },
     { name: 'NSMachPortDeallocateSendRight', value: '1' },
     { name: 'NSMapTableCopyIn', value: '65536' },
     { name: 'NSMapTableObjectPointerPersonality', value: '512' },
     { name: 'NSMapTableStrongMemory', value: '0' },
     { name: 'NSMapTableZeroingWeakMemory', value: '1' },
     { name: 'NSMappedRead', value: '1' },
     { name: 'NSMatchesPredicateOperatorType', value: '6' },
     { name: 'NSMatchingAnchored', value: '4' },
     { name: 'NSMatchingCompleted', value: '2' },
     { name: 'NSMatchingHitEnd', value: '4' },
     { name: 'NSMatchingInternalError', value: '16' },
     { name: 'NSMatchingProgress', value: '1' },
     { name: 'NSMatchingReportCompletion', value: '2' },
     { name: 'NSMatchingReportProgress', value: '1' },
     { name: 'NSMatchingRequiredEnd', value: '8' },
     { name: 'NSMatchingWithTransparentBounds', value: '8' },
     { name: 'NSMatchingWithoutAnchoringBounds', value: '16' },
     { name: 'NSMaxXEdge', value64: '2' },
     { name: 'NSMaxYEdge', value64: '3' },
     { name: 'NSMaximumStringLength', value: '2147483646' },
     { name: 'NSMiddleSubelement', value: '2' },
     { name: 'NSMinXEdge', value64: '0' },
     { name: 'NSMinYEdge', value64: '1' },
     { name: 'NSMinusSetExpressionType', value: '7' },
     { name: 'NSMinuteCalendarUnit', value: '64' },
     { name: 'NSMonthCalendarUnit', value: '8' },
     { name: 'NSMoviesDirectory', value: '17' },
     { name: 'NSMusicDirectory', value: '18' },
     { name: 'NSNEXTSTEPStringEncoding', value: '2' },
     { name: 'NSNetServiceNoAutoRename', value: '1' },
     { name: 'NSNetServicesActivityInProgress', value: '-72003' },
     { name: 'NSNetServicesBadArgumentError', value: '-72004' },
     { name: 'NSNetServicesCancelledError', value: '-72005' },
     { name: 'NSNetServicesCollisionError', value: '-72001' },
     { name: 'NSNetServicesInvalidError', value: '-72006' },
     { name: 'NSNetServicesNotFoundError', value: '-72002' },
     { name: 'NSNetServicesTimeoutError', value: '-72007' },
     { name: 'NSNetServicesUnknownError', value: '-72000' },
     { name: 'NSNetworkDomainMask', value: '4' },
     { name: 'NSNoScriptError', value: '0' },
     { name: 'NSNoSpecifierError', value: '0' },
     { name: 'NSNoSubelement', value: '4' },
     { name: 'NSNoTopLevelContainersSpecifierError', value: '1' },
     { name: 'NSNonLossyASCIIStringEncoding', value: '7' },
     { name: 'NSNormalizedPredicateOption', value: '4' },
     { name: 'NSNotEqualToPredicateOperatorType', value: '5' },
     { name: 'NSNotFound',
       value64: '9223372036854775807',
       value: '2147483647' },
     { name: 'NSNotPredicateType', value: '0' },
     { name: 'NSNotificationCoalescingOnName', value: '1' },
     { name: 'NSNotificationCoalescingOnSender', value: '2' },
     { name: 'NSNotificationDeliverImmediately', value: '1' },
     { name: 'NSNotificationNoCoalescing', value: '0' },
     { name: 'NSNotificationPostToAllSessions', value: '2' },
     { name: 'NSNotificationSuspensionBehaviorCoalesce', value: '2' },
     { name: 'NSNotificationSuspensionBehaviorDeliverImmediately',
       value: '4' },
     { name: 'NSNotificationSuspensionBehaviorDrop', value: '1' },
     { name: 'NSNotificationSuspensionBehaviorHold', value: '3' },
     { name: 'NSNumberFormatterBehavior10_0', value: '1000' },
     { name: 'NSNumberFormatterBehavior10_4', value: '1040' },
     { name: 'NSNumberFormatterBehaviorDefault', value: '0' },
     { name: 'NSNumberFormatterCurrencyStyle', value: '2' },
     { name: 'NSNumberFormatterDecimalStyle', value: '1' },
     { name: 'NSNumberFormatterNoStyle', value: '0' },
     { name: 'NSNumberFormatterPadAfterPrefix', value: '1' },
     { name: 'NSNumberFormatterPadAfterSuffix', value: '3' },
     { name: 'NSNumberFormatterPadBeforePrefix', value: '0' },
     { name: 'NSNumberFormatterPadBeforeSuffix', value: '2' },
     { name: 'NSNumberFormatterPercentStyle', value: '3' },
     { name: 'NSNumberFormatterRoundCeiling', value: '0' },
     { name: 'NSNumberFormatterRoundDown', value: '2' },
     { name: 'NSNumberFormatterRoundFloor', value: '1' },
     { name: 'NSNumberFormatterRoundHalfDown', value: '5' },
     { name: 'NSNumberFormatterRoundHalfEven', value: '4' },
     { name: 'NSNumberFormatterRoundHalfUp', value: '6' },
     { name: 'NSNumberFormatterRoundUp', value: '3' },
     { name: 'NSNumberFormatterScientificStyle', value: '4' },
     { name: 'NSNumberFormatterSpellOutStyle', value: '5' },
     { name: 'NSNumericSearch', value: '64' },
     { name: 'NSOSF1OperatingSystem', value: '7' },
     { name: 'NSObjectAutoreleasedEvent', value: '3' },
     { name: 'NSObjectExtraRefDecrementedEvent', value: '5' },
     { name: 'NSObjectExtraRefIncrementedEvent', value: '4' },
     { name: 'NSObjectInternalRefDecrementedEvent', value: '7' },
     { name: 'NSObjectInternalRefIncrementedEvent', value: '6' },
     { name: 'NSOpenStepUnicodeReservedBase', value: '62464' },
     { name: 'NSOperationNotSupportedForKeyScriptError', value: '9' },
     { name: 'NSOperationNotSupportedForKeySpecifierError',
       value: '6' },
     { name: 'NSOperationQueueDefaultMaxConcurrentOperationCount',
       value: '-1' },
     { name: 'NSOperationQueuePriorityHigh', value: '4' },
     { name: 'NSOperationQueuePriorityLow', value: '-4' },
     { name: 'NSOperationQueuePriorityNormal', value: '0' },
     { name: 'NSOperationQueuePriorityVeryHigh', value: '8' },
     { name: 'NSOperationQueuePriorityVeryLow', value: '-8' },
     { name: 'NSOrPredicateType', value: '2' },
     { name: 'NSOrderedAscending', value: '-1' },
     { name: 'NSOrderedDescending', value: '1' },
     { name: 'NSOrderedSame', value: '0' },
     { name: 'NSPicturesDirectory', value: '19' },
     { name: 'NSPointerFunctionsCStringPersonality', value: '768' },
     { name: 'NSPointerFunctionsCopyIn', value: '65536' },
     { name: 'NSPointerFunctionsIntegerPersonality', value: '1280' },
     { name: 'NSPointerFunctionsMachVirtualMemory', value: '4' },
     { name: 'NSPointerFunctionsMallocMemory', value: '3' },
     { name: 'NSPointerFunctionsObjectPersonality', value: '0' },
     { name: 'NSPointerFunctionsObjectPointerPersonality',
       value: '512' },
     { name: 'NSPointerFunctionsOpaqueMemory', value: '2' },
     { name: 'NSPointerFunctionsOpaquePersonality', value: '256' },
     { name: 'NSPointerFunctionsStrongMemory', value: '0' },
     { name: 'NSPointerFunctionsStructPersonality', value: '1024' },
     { name: 'NSPointerFunctionsZeroingWeakMemory', value: '1' },
     { name: 'NSPositionAfter', value: '0' },
     { name: 'NSPositionBefore', value: '1' },
     { name: 'NSPositionBeginning', value: '2' },
     { name: 'NSPositionEnd', value: '3' },
     { name: 'NSPositionReplace', value: '4' },
     { name: 'NSPostASAP', value: '2' },
     { name: 'NSPostNow', value: '3' },
     { name: 'NSPostWhenIdle', value: '1' },
     { name: 'NSPreferencePanesDirectory', value: '22' },
     { name: 'NSPrinterDescriptionDirectory', value: '20' },
     { name: 'NSPropertyListBinaryFormat_v1_0', value: '200' },
     { name: 'NSPropertyListErrorMaximum', value: '4095' },
     { name: 'NSPropertyListErrorMinimum', value: '3840' },
     { name: 'NSPropertyListImmutable', value: '0' },
     { name: 'NSPropertyListMutableContainers', value: '1' },
     { name: 'NSPropertyListMutableContainersAndLeaves', value: '2' },
     { name: 'NSPropertyListOpenStepFormat', value: '1' },
     { name: 'NSPropertyListReadCorruptError', value: '3840' },
     { name: 'NSPropertyListReadStreamError', value: '3842' },
     { name: 'NSPropertyListReadUnknownVersionError', value: '3841' },
     { name: 'NSPropertyListWriteStreamError', value: '3851' },
     { name: 'NSPropertyListXMLFormat_v1_0', value: '100' },
     { name: 'NSProprietaryStringEncoding', value: '65536' },
     { name: 'NSQuarterCalendarUnit', value: '2048' },
     { name: 'NSRandomSubelement', value: '3' },
     { name: 'NSReceiverEvaluationScriptError', value: '1' },
     { name: 'NSReceiversCantHandleCommandScriptError', value: '4' },
     { name: 'NSRegularExpressionAllowCommentsAndWhitespace',
       value: '2' },
     { name: 'NSRegularExpressionAnchorsMatchLines', value: '16' },
     { name: 'NSRegularExpressionCaseInsensitive', value: '1' },
     { name: 'NSRegularExpressionDotMatchesLineSeparators',
       value: '8' },
     { name: 'NSRegularExpressionIgnoreMetacharacters', value: '4' },
     { name: 'NSRegularExpressionSearch', value: '1024' },
     { name: 'NSRegularExpressionUseUnicodeWordBoundaries',
       value: '64' },
     { name: 'NSRegularExpressionUseUnixLineSeparators',
       value: '32' },
     { name: 'NSRelativeAfter', value: '0' },
     { name: 'NSRelativeBefore', value: '1' },
     { name: 'NSRequiredArgumentsMissingScriptError', value: '5' },
     { name: 'NSRoundBankers', value: '3' },
     { name: 'NSRoundDown', value: '1' },
     { name: 'NSRoundPlain', value: '0' },
     { name: 'NSRoundUp', value: '2' },
     { name: 'NSSaveOptionsAsk', value: '2' },
     { name: 'NSSaveOptionsNo', value: '1' },
     { name: 'NSSaveOptionsYes', value: '0' },
     { name: 'NSScannedOption', value: '1' },
     { name: 'NSSecondCalendarUnit', value: '128' },
     { name: 'NSSharedPublicDirectory', value: '21' },
     { name: 'NSShiftJISStringEncoding', value: '8' },
     { name: 'NSSolarisOperatingSystem', value: '3' },
     { name: 'NSSortConcurrent', value: '1' },
     { name: 'NSSortStable', value: '16' },
     { name: 'NSStreamEventEndEncountered', value: '16' },
     { name: 'NSStreamEventErrorOccurred', value: '8' },
     { name: 'NSStreamEventHasBytesAvailable', value: '2' },
     { name: 'NSStreamEventHasSpaceAvailable', value: '4' },
     { name: 'NSStreamEventNone', value: '0' },
     { name: 'NSStreamEventOpenCompleted', value: '1' },
     { name: 'NSStreamStatusAtEnd', value: '5' },
     { name: 'NSStreamStatusClosed', value: '6' },
     { name: 'NSStreamStatusError', value: '7' },
     { name: 'NSStreamStatusNotOpen', value: '0' },
     { name: 'NSStreamStatusOpen', value: '2' },
     { name: 'NSStreamStatusOpening', value: '1' },
     { name: 'NSStreamStatusReading', value: '3' },
     { name: 'NSStreamStatusWriting', value: '4' },
     { name: 'NSStringEncodingConversionAllowLossy', value: '1' },
     { name: 'NSStringEncodingConversionExternalRepresentation',
       value: '2' },
     { name: 'NSStringEnumerationByComposedCharacterSequences',
       value: '2' },
     { name: 'NSStringEnumerationByLines', value: '0' },
     { name: 'NSStringEnumerationByParagraphs', value: '1' },
     { name: 'NSStringEnumerationBySentences', value: '4' },
     { name: 'NSStringEnumerationByWords', value: '3' },
     { name: 'NSStringEnumerationLocalized', value: '1024' },
     { name: 'NSStringEnumerationReverse', value: '256' },
     { name: 'NSStringEnumerationSubstringNotRequired',
       value: '512' },
     { name: 'NSSubqueryExpressionType', value: '13' },
     { name: 'NSSunOSOperatingSystem', value: '6' },
     { name: 'NSSymbolStringEncoding', value: '6' },
     { name: 'NSSystemDomainMask', value: '8' },
     { name: 'NSTaskTerminationReasonExit', value: '1' },
     { name: 'NSTaskTerminationReasonUncaughtSignal', value: '2' },
     { name: 'NSTextCheckingAllCustomTypes',
       value: '18446744069414584320' },
     { name: 'NSTextCheckingAllSystemTypes', value: '4294967295' },
     { name: 'NSTextCheckingAllTypes',
       value: '18446744073709551615' },
     { name: 'NSTextCheckingTypeAddress', value: '16' },
     { name: 'NSTextCheckingTypeCorrection', value: '512' },
     { name: 'NSTextCheckingTypeDash', value: '128' },
     { name: 'NSTextCheckingTypeDate', value: '8' },
     { name: 'NSTextCheckingTypeGrammar', value: '4' },
     { name: 'NSTextCheckingTypeLink', value: '32' },
     { name: 'NSTextCheckingTypeOrthography', value: '1' },
     { name: 'NSTextCheckingTypePhoneNumber', value: '2048' },
     { name: 'NSTextCheckingTypeQuote', value: '64' },
     { name: 'NSTextCheckingTypeRegularExpression', value: '1024' },
     { name: 'NSTextCheckingTypeReplacement', value: '256' },
     { name: 'NSTextCheckingTypeSpelling', value: '2' },
     { name: 'NSTextCheckingTypeTransitInformation', value: '4096' },
     { name: 'NSTimeIntervalSince1970', value: '978307200.0' },
     { name: 'NSTimeZoneCalendarUnit', value: '2097152' },
     { name: 'NSTimeZoneNameStyleDaylightSaving', value: '2' },
     { name: 'NSTimeZoneNameStyleGeneric', value: '4' },
     { name: 'NSTimeZoneNameStyleShortDaylightSaving', value: '3' },
     { name: 'NSTimeZoneNameStyleShortGeneric', value: '5' },
     { name: 'NSTimeZoneNameStyleShortStandard', value: '1' },
     { name: 'NSTimeZoneNameStyleStandard', value: '0' },
     { name: 'NSUIntegerMax',
       value64: '18446744073709551615',
       value: '4294967295' },
     { name: 'NSURLBookmarkCreationMinimalBookmark', value: '512' },
     { name: 'NSURLBookmarkCreationPreferFileIDResolution',
       value: '256' },
     { name: 'NSURLBookmarkCreationSuitableForBookmarkFile',
       value: '1024' },
     { name: 'NSURLBookmarkResolutionWithoutMounting', value: '512' },
     { name: 'NSURLBookmarkResolutionWithoutUI', value: '256' },
     { name: 'NSURLCacheStorageAllowed', value: '0' },
     { name: 'NSURLCacheStorageAllowedInMemoryOnly', value: '1' },
     { name: 'NSURLCacheStorageNotAllowed', value: '2' },
     { name: 'NSURLCredentialPersistenceForSession', value: '1' },
     { name: 'NSURLCredentialPersistenceNone', value: '0' },
     { name: 'NSURLCredentialPersistencePermanent', value: '2' },
     { name: 'NSURLErrorBadServerResponse', value: '-1011' },
     { name: 'NSURLErrorBadURL', value: '-1000' },
     { name: 'NSURLErrorCallIsActive', value: '-1019' },
     { name: 'NSURLErrorCancelled', value: '-999' },
     { name: 'NSURLErrorCannotCloseFile', value: '-3002' },
     { name: 'NSURLErrorCannotConnectToHost', value: '-1004' },
     { name: 'NSURLErrorCannotCreateFile', value: '-3000' },
     { name: 'NSURLErrorCannotDecodeContentData', value: '-1016' },
     { name: 'NSURLErrorCannotDecodeRawData', value: '-1015' },
     { name: 'NSURLErrorCannotFindHost', value: '-1003' },
     { name: 'NSURLErrorCannotLoadFromNetwork', value: '-2000' },
     { name: 'NSURLErrorCannotMoveFile', value: '-3005' },
     { name: 'NSURLErrorCannotOpenFile', value: '-3001' },
     { name: 'NSURLErrorCannotParseResponse', value: '-1017' },
     { name: 'NSURLErrorCannotRemoveFile', value: '-3004' },
     { name: 'NSURLErrorCannotWriteToFile', value: '-3003' },
     { name: 'NSURLErrorClientCertificateRejected', value: '-1205' },
     { name: 'NSURLErrorClientCertificateRequired', value: '-1206' },
     { name: 'NSURLErrorDNSLookupFailed', value: '-1006' },
     { name: 'NSURLErrorDataLengthExceedsMaximum', value: '-1103' },
     { name: 'NSURLErrorDataNotAllowed', value: '-1020' },
     { name: 'NSURLErrorDownloadDecodingFailedMidStream',
       value: '-3006' },
     { name: 'NSURLErrorDownloadDecodingFailedToComplete',
       value: '-3007' },
     { name: 'NSURLErrorFileDoesNotExist', value: '-1100' },
     { name: 'NSURLErrorFileIsDirectory', value: '-1101' },
     { name: 'NSURLErrorHTTPTooManyRedirects', value: '-1007' },
     { name: 'NSURLErrorInternationalRoamingOff', value: '-1018' },
     { name: 'NSURLErrorNetworkConnectionLost', value: '-1005' },
     { name: 'NSURLErrorNoPermissionsToReadFile', value: '-1102' },
     { name: 'NSURLErrorNotConnectedToInternet', value: '-1009' },
     { name: 'NSURLErrorRedirectToNonExistentLocation',
       value: '-1010' },
     { name: 'NSURLErrorRequestBodyStreamExhausted', value: '-1021' },
     { name: 'NSURLErrorResourceUnavailable', value: '-1008' },
     { name: 'NSURLErrorSecureConnectionFailed', value: '-1200' },
     { name: 'NSURLErrorServerCertificateHasBadDate',
       value: '-1201' },
     { name: 'NSURLErrorServerCertificateHasUnknownRoot',
       value: '-1203' },
     { name: 'NSURLErrorServerCertificateNotYetValid',
       value: '-1204' },
     { name: 'NSURLErrorServerCertificateUntrusted', value: '-1202' },
     { name: 'NSURLErrorTimedOut', value: '-1001' },
     { name: 'NSURLErrorUnknown', value: '-1' },
     { name: 'NSURLErrorUnsupportedURL', value: '-1002' },
     { name: 'NSURLErrorUserAuthenticationRequired', value: '-1013' },
     { name: 'NSURLErrorUserCancelledAuthentication',
       value: '-1012' },
     { name: 'NSURLErrorZeroByteResource', value: '-1014' },
     { name: 'NSURLHandleLoadFailed', value: '3' },
     { name: 'NSURLHandleLoadInProgress', value: '2' },
     { name: 'NSURLHandleLoadSucceeded', value: '1' },
     { name: 'NSURLHandleNotLoaded', value: '0' },
     { name: 'NSURLNetworkServiceTypeBackground', value: '3' },
     { name: 'NSURLNetworkServiceTypeDefault', value: '0' },
     { name: 'NSURLNetworkServiceTypeVideo', value: '2' },
     { name: 'NSURLNetworkServiceTypeVoIP', value: '1' },
     { name: 'NSURLNetworkServiceTypeVoice', value: '4' },
     { name: 'NSURLRequestReloadIgnoringCacheData', value: '1' },
     { name: 'NSURLRequestReloadIgnoringLocalAndRemoteCacheData',
       value: '4' },
     { name: 'NSURLRequestReloadIgnoringLocalCacheData', value: '1' },
     { name: 'NSURLRequestReloadRevalidatingCacheData', value: '5' },
     { name: 'NSURLRequestReturnCacheDataDontLoad', value: '3' },
     { name: 'NSURLRequestReturnCacheDataElseLoad', value: '2' },
     { name: 'NSURLRequestUseProtocolCachePolicy', value: '0' },
     { name: 'NSURLResponseUnknownLength', value: '-1' },
     { name: 'NSUTF16BigEndianStringEncoding', value: '2415919360' },
     { name: 'NSUTF16LittleEndianStringEncoding',
       value: '2483028224' },
     { name: 'NSUTF16StringEncoding', value: '10' },
     { name: 'NSUTF32BigEndianStringEncoding', value: '2550137088' },
     { name: 'NSUTF32LittleEndianStringEncoding',
       value: '2617245952' },
     { name: 'NSUTF32StringEncoding', value: '2348810496' },
     { name: 'NSUTF8StringEncoding', value: '4' },
     { name: 'NSUbiquitousKeyValueStoreInitialSyncChange',
       value: '1' },
     { name: 'NSUbiquitousKeyValueStoreQuotaViolationChange',
       value: '2' },
     { name: 'NSUbiquitousKeyValueStoreServerChange', value: '0' },
     { name: 'NSUncachedRead', value: '2' },
     { name: 'NSUndefinedDateComponent',
       value64: '9223372036854775807',
       value: '2147483647' },
     { name: 'NSUndoCloseGroupingRunLoopOrdering', value: '350000' },
     { name: 'NSUnicodeStringEncoding', value: '10' },
     { name: 'NSUnionSetExpressionType', value: '5' },
     { name: 'NSUnknownKeyScriptError', value: '7' },
     { name: 'NSUnknownKeySpecifierError', value: '3' },
     { name: 'NSUserCancelledError', value: '3072' },
     { name: 'NSUserDirectory', value: '7' },
     { name: 'NSUserDomainMask', value: '1' },
     { name: 'NSValidationErrorMaximum', value: '2047' },
     { name: 'NSValidationErrorMinimum', value: '1024' },
     { name: 'NSVariableExpressionType', value: '2' },
     { name: 'NSVolumeEnumerationProduceFileReferenceURLs',
       value: '4' },
     { name: 'NSVolumeEnumerationSkipHiddenVolumes', value: '2' },
     { name: 'NSWeekCalendarUnit', value: '256' },
     { name: 'NSWeekOfMonthCalendarUnit', value: '4096' },
     { name: 'NSWeekOfYearCalendarUnit', value: '8192' },
     { name: 'NSWeekdayCalendarUnit', value: '512' },
     { name: 'NSWeekdayOrdinalCalendarUnit', value: '1024' },
     { name: 'NSWidthInsensitiveSearch', value: '256' },
     { name: 'NSWindows95OperatingSystem', value: '2' },
     { name: 'NSWindowsCP1250StringEncoding', value: '15' },
     { name: 'NSWindowsCP1251StringEncoding', value: '11' },
     { name: 'NSWindowsCP1252StringEncoding', value: '12' },
     { name: 'NSWindowsCP1253StringEncoding', value: '13' },
     { name: 'NSWindowsCP1254StringEncoding', value: '14' },
     { name: 'NSWindowsNTOperatingSystem', value: '1' },
     { name: 'NSWrapCalendarComponents', value: '1' },
     { name: 'NSXMLAttributeCDATAKind', value: '6' },
     { name: 'NSXMLAttributeDeclarationKind', value: '10' },
     { name: 'NSXMLAttributeEntitiesKind', value: '11' },
     { name: 'NSXMLAttributeEntityKind', value: '10' },
     { name: 'NSXMLAttributeEnumerationKind', value: '14' },
     { name: 'NSXMLAttributeIDKind', value: '7' },
     { name: 'NSXMLAttributeIDRefKind', value: '8' },
     { name: 'NSXMLAttributeIDRefsKind', value: '9' },
     { name: 'NSXMLAttributeKind', value: '3' },
     { name: 'NSXMLAttributeNMTokenKind', value: '12' },
     { name: 'NSXMLAttributeNMTokensKind', value: '13' },
     { name: 'NSXMLAttributeNotationKind', value: '15' },
     { name: 'NSXMLCommentKind', value: '6' },
     { name: 'NSXMLDTDKind', value: '8' },
     { name: 'NSXMLDocumentHTMLKind', value: '2' },
     { name: 'NSXMLDocumentIncludeContentTypeDeclaration',
       value: '262144' },
     { name: 'NSXMLDocumentKind', value: '1' },
     { name: 'NSXMLDocumentTextKind', value: '3' },
     { name: 'NSXMLDocumentTidyHTML', value: '512' },
     { name: 'NSXMLDocumentTidyXML', value: '1024' },
     { name: 'NSXMLDocumentValidate', value: '8192' },
     { name: 'NSXMLDocumentXHTMLKind', value: '1' },
     { name: 'NSXMLDocumentXInclude', value: '65536' },
     { name: 'NSXMLDocumentXMLKind', value: '0' },
     { name: 'NSXMLElementDeclarationAnyKind', value: '18' },
     { name: 'NSXMLElementDeclarationElementKind', value: '20' },
     { name: 'NSXMLElementDeclarationEmptyKind', value: '17' },
     { name: 'NSXMLElementDeclarationKind', value: '11' },
     { name: 'NSXMLElementDeclarationMixedKind', value: '19' },
     { name: 'NSXMLElementDeclarationUndefinedKind', value: '16' },
     { name: 'NSXMLElementKind', value: '2' },
     { name: 'NSXMLEntityDeclarationKind', value: '9' },
     { name: 'NSXMLEntityGeneralKind', value: '1' },
     { name: 'NSXMLEntityParameterKind', value: '4' },
     { name: 'NSXMLEntityParsedKind', value: '2' },
     { name: 'NSXMLEntityPredefined', value: '5' },
     { name: 'NSXMLEntityUnparsedKind', value: '3' },
     { name: 'NSXMLInvalidKind', value: '0' },
     { name: 'NSXMLNamespaceKind', value: '4' },
     { name: 'NSXMLNodeCompactEmptyElement', value: '4' },
     { name: 'NSXMLNodeExpandEmptyElement', value: '2' },
     { name: 'NSXMLNodeIsCDATA', value: '1' },
     { name: 'NSXMLNodeLoadExternalEntitiesAlways', value: '16384' },
     { name: 'NSXMLNodeLoadExternalEntitiesNever', value: '524288' },
     { name: 'NSXMLNodeLoadExternalEntitiesSameOriginOnly',
       value: '32768' },
     { name: 'NSXMLNodeOptionsNone', value: '0' },
     { name: 'NSXMLNodePreserveAll', value: '4293918750' },
     { name: 'NSXMLNodePreserveAttributeOrder', value: '2097152' },
     { name: 'NSXMLNodePreserveCDATA', value: '16777216' },
     { name: 'NSXMLNodePreserveCharacterReferences',
       value: '134217728' },
     { name: 'NSXMLNodePreserveDTD', value: '67108864' },
     { name: 'NSXMLNodePreserveEmptyElements', value: '6' },
     { name: 'NSXMLNodePreserveEntities', value: '4194304' },
     { name: 'NSXMLNodePreserveNamespaceOrder', value: '1048576' },
     { name: 'NSXMLNodePreservePrefixes', value: '8388608' },
     { name: 'NSXMLNodePreserveQuotes', value: '24' },
     { name: 'NSXMLNodePreserveWhitespace', value: '33554432' },
     { name: 'NSXMLNodePrettyPrint', value: '131072' },
     { name: 'NSXMLNodeUseDoubleQuotes', value: '16' },
     { name: 'NSXMLNodeUseSingleQuotes', value: '8' },
     { name: 'NSXMLNotationDeclarationKind', value: '12' },
     { name: 'NSXMLParserAttributeHasNoValueError', value: '41' },
     { name: 'NSXMLParserAttributeListNotFinishedError',
       value: '51' },
     { name: 'NSXMLParserAttributeListNotStartedError', value: '50' },
     { name: 'NSXMLParserAttributeNotFinishedError', value: '40' },
     { name: 'NSXMLParserAttributeNotStartedError', value: '39' },
     { name: 'NSXMLParserAttributeRedefinedError', value: '42' },
     { name: 'NSXMLParserCDATANotFinishedError', value: '63' },
     { name: 'NSXMLParserCharacterRefAtEOFError', value: '10' },
     { name: 'NSXMLParserCharacterRefInDTDError', value: '13' },
     { name: 'NSXMLParserCharacterRefInEpilogError', value: '12' },
     { name: 'NSXMLParserCharacterRefInPrologError', value: '11' },
     { name: 'NSXMLParserCommentContainsDoubleHyphenError',
       value: '80' },
     { name: 'NSXMLParserCommentNotFinishedError', value: '45' },
     { name: 'NSXMLParserConditionalSectionNotFinishedError',
       value: '59' },
     { name: 'NSXMLParserConditionalSectionNotStartedError',
       value: '58' },
     { name: 'NSXMLParserDOCTYPEDeclNotFinishedError', value: '61' },
     { name: 'NSXMLParserDelegateAbortedParseError', value: '512' },
     { name: 'NSXMLParserDocumentStartError', value: '3' },
     { name: 'NSXMLParserElementContentDeclNotFinishedError',
       value: '55' },
     { name: 'NSXMLParserElementContentDeclNotStartedError',
       value: '54' },
     { name: 'NSXMLParserEmptyDocumentError', value: '4' },
     { name: 'NSXMLParserEncodingNotSupportedError', value: '32' },
     { name: 'NSXMLParserEntityBoundaryError', value: '90' },
     { name: 'NSXMLParserEntityIsExternalError', value: '29' },
     { name: 'NSXMLParserEntityIsParameterError', value: '30' },
     { name: 'NSXMLParserEntityNotFinishedError', value: '37' },
     { name: 'NSXMLParserEntityNotStartedError', value: '36' },
     { name: 'NSXMLParserEntityRefAtEOFError', value: '14' },
     { name: 'NSXMLParserEntityRefInDTDError', value: '17' },
     { name: 'NSXMLParserEntityRefInEpilogError', value: '16' },
     { name: 'NSXMLParserEntityRefInPrologError', value: '15' },
     { name: 'NSXMLParserEntityRefLoopError', value: '89' },
     { name: 'NSXMLParserEntityReferenceMissingSemiError',
       value: '23' },
     { name: 'NSXMLParserEntityReferenceWithoutNameError',
       value: '22' },
     { name: 'NSXMLParserEntityValueRequiredError', value: '84' },
     { name: 'NSXMLParserEqualExpectedError', value: '75' },
     { name: 'NSXMLParserExternalStandaloneEntityError',
       value: '82' },
     { name: 'NSXMLParserExternalSubsetNotFinishedError',
       value: '60' },
     { name: 'NSXMLParserExtraContentError', value: '86' },
     { name: 'NSXMLParserGTRequiredError', value: '73' },
     { name: 'NSXMLParserInternalError', value: '1' },
     { name: 'NSXMLParserInvalidCharacterError', value: '9' },
     { name: 'NSXMLParserInvalidCharacterInEntityError',
       value: '87' },
     { name: 'NSXMLParserInvalidCharacterRefError', value: '8' },
     { name: 'NSXMLParserInvalidConditionalSectionError',
       value: '83' },
     { name: 'NSXMLParserInvalidDecimalCharacterRefError',
       value: '7' },
     { name: 'NSXMLParserInvalidEncodingError', value: '81' },
     { name: 'NSXMLParserInvalidEncodingNameError', value: '79' },
     { name: 'NSXMLParserInvalidHexCharacterRefError', value: '6' },
     { name: 'NSXMLParserInvalidURIError', value: '91' },
     { name: 'NSXMLParserLTRequiredError', value: '72' },
     { name: 'NSXMLParserLTSlashRequiredError', value: '74' },
     { name: 'NSXMLParserLessThanSymbolInAttributeError',
       value: '38' },
     { name: 'NSXMLParserLiteralNotFinishedError', value: '44' },
     { name: 'NSXMLParserLiteralNotStartedError', value: '43' },
     { name: 'NSXMLParserMisplacedCDATAEndStringError', value: '62' },
     { name: 'NSXMLParserMisplacedXMLDeclarationError', value: '64' },
     { name: 'NSXMLParserMixedContentDeclNotFinishedError',
       value: '53' },
     { name: 'NSXMLParserMixedContentDeclNotStartedError',
       value: '52' },
     { name: 'NSXMLParserNAMERequiredError', value: '68' },
     { name: 'NSXMLParserNMTOKENRequiredError', value: '67' },
     { name: 'NSXMLParserNamespaceDeclarationError', value: '35' },
     { name: 'NSXMLParserNoDTDError', value: '94' },
     { name: 'NSXMLParserNotWellBalancedError', value: '85' },
     { name: 'NSXMLParserNotationNotFinishedError', value: '49' },
     { name: 'NSXMLParserNotationNotStartedError', value: '48' },
     { name: 'NSXMLParserOutOfMemoryError', value: '2' },
     { name: 'NSXMLParserPCDATARequiredError', value: '69' },
     { name: 'NSXMLParserParsedEntityRefAtEOFError', value: '18' },
     { name: 'NSXMLParserParsedEntityRefInEpilogError', value: '20' },
     { name: 'NSXMLParserParsedEntityRefInInternalError',
       value: '88' },
     { name: 'NSXMLParserParsedEntityRefInInternalSubsetError',
       value: '21' },
     { name: 'NSXMLParserParsedEntityRefInPrologError', value: '19' },
     { name: 'NSXMLParserParsedEntityRefMissingSemiError',
       value: '25' },
     { name: 'NSXMLParserParsedEntityRefNoNameError', value: '24' },
     { name: 'NSXMLParserPrematureDocumentEndError', value: '5' },
     { name: 'NSXMLParserProcessingInstructionNotFinishedError',
       value: '47' },
     { name: 'NSXMLParserProcessingInstructionNotStartedError',
       value: '46' },
     { name: 'NSXMLParserPublicIdentifierRequiredError',
       value: '71' },
     { name: 'NSXMLParserSeparatorRequiredError', value: '66' },
     { name: 'NSXMLParserSpaceRequiredError', value: '65' },
     { name: 'NSXMLParserStandaloneValueError', value: '78' },
     { name: 'NSXMLParserStringNotClosedError', value: '34' },
     { name: 'NSXMLParserStringNotStartedError', value: '33' },
     { name: 'NSXMLParserTagNameMismatchError', value: '76' },
     { name: 'NSXMLParserURIFragmentError', value: '92' },
     { name: 'NSXMLParserURIRequiredError', value: '70' },
     { name: 'NSXMLParserUndeclaredEntityError', value: '26' },
     { name: 'NSXMLParserUnfinishedTagError', value: '77' },
     { name: 'NSXMLParserUnknownEncodingError', value: '31' },
     { name: 'NSXMLParserUnparsedEntityError', value: '28' },
     { name: 'NSXMLParserXMLDeclNotFinishedError', value: '57' },
     { name: 'NSXMLParserXMLDeclNotStartedError', value: '56' },
     { name: 'NSXMLProcessingInstructionKind', value: '5' },
     { name: 'NSXMLTextKind', value: '7' },
     { name: 'NSYearCalendarUnit', value: '4' },
     { name: 'NSYearForWeekOfYearCalendarUnit', value: '16384' },
     { name: 'NS_BLOCKS_AVAILABLE', value: '1' },
     { name: 'NS_BigEndian', value: '2' },
     { name: 'NS_LittleEndian', value: '1' },
     { name: 'NS_UNICHAR_IS_EIGHT_BIT', value: '0' },
     { name: 'NS_UnknownByteOrder', value: '0' } ],
  function: 
   [ { name: 'CFBridgingRelease',
       inline: 'true',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'CFBridgingRetain',
       inline: 'true',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSAllHashTableObjects',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSAllMapTableKeys',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSAllMapTableValues',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSAllocateCollectable',
       arg: [ { type64: 'Q', type: 'I' }, { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSAllocateMemoryPages',
       arg: [ { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSAllocateObject',
       arg: 
        [ { type: '#' },
          { type64: 'Q', type: 'I' },
          { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSClassFromString',
       arg: [ { type: '@' } ],
       retval: [ { type: '#' } ] },
     { name: 'NSCompareHashTables',
       arg: [ { type: '@' }, { type: '@' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSCompareMapTables',
       arg: [ { type: '@' }, { type: '@' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSContainsRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSConvertHostDoubleToSwapped',
       inline: 'true',
       arg: [ { type: 'd' } ],
       retval: [ { type: '{_NSSwappedDouble=Q}' } ] },
     { name: 'NSConvertHostFloatToSwapped',
       inline: 'true',
       arg: [ { type: 'f' } ],
       retval: [ { type: '{_NSSwappedFloat=I}' } ] },
     { name: 'NSConvertSwappedDoubleToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedDouble=Q}' } ],
       retval: [ { type: 'd' } ] },
     { name: 'NSConvertSwappedFloatToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedFloat=I}' } ],
       retval: [ { type: 'f' } ] },
     { name: 'NSCopyHashTableWithZone',
       arg: [ { type: '@' }, { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCopyMapTableWithZone',
       arg: [ { type: '@' }, { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCopyMemoryPages',
       arg: 
        [ { type: '^v', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ] },
     { name: 'NSCopyObject',
       arg: 
        [ { type: '@' },
          { type64: 'Q', type: 'I' },
          { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCountFrames',
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSCountHashTable',
       arg: [ { type: '@' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSCountMapTable',
       arg: [ { type: '@' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSCreateHashTable',
       arg: 
        [ { type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCreateHashTableWithZone',
       arg: 
        [ { type: '{_NSHashTableCallBacks=^?^?^?^?^?}' },
          { type64: 'Q', type: 'I' },
          { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCreateMapTable',
       arg: 
        [ { type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
          { type: '{_NSMapTableValueCallBacks=^?^?^?}' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCreateMapTableWithZone',
       arg: 
        [ { type: '{_NSMapTableKeyCallBacks=^?^?^?^?^?^v}' },
          { type: '{_NSMapTableValueCallBacks=^?^?^?}' },
          { type64: 'Q', type: 'I' },
          { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSCreateZone',
       arg: 
        [ { type64: 'Q', type: 'I' },
          { type64: 'Q', type: 'I' },
          { type: 'B' } ],
       retval: [ { type: '^{_NSZone=}' } ] },
     { name: 'NSDeallocateMemoryPages',
       arg: 
        [ { type: '^v', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ] },
     { name: 'NSDeallocateObject', arg: [ { type: '@' } ] },
     { name: 'NSDecimalAdd',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalCompact',
       arg: [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' } ] },
     { name: 'NSDecimalCompare',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' } ],
       retval: [ { type64: 'q', type: 'i' } ] },
     { name: 'NSDecimalCopy',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' } ] },
     { name: 'NSDecimalDivide',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalIsNotANumber',
       inline: 'true',
       arg: [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSDecimalMultiply',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalMultiplyByPowerOf10',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: 's' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalNormalize',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalPower',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalRound',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'q', type: 'i' },
          { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecimalString',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSDecimalSubtract',
       arg: 
        [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type: '^{_NSDecimal=b8b4b1b1b18[8S]}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSDecrementExtraRefCountWasZero',
       arg: [ { type: '@' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSDefaultMallocZone',
       retval: [ { type: '^{_NSZone=}' } ] },
     { name: 'NSDivideRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '^{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '^{_NSRect={_NSPoint=ff}{_NSSize=ff}}',
            type_modifier: 'o' },
          { type64: '^{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '^{_NSRect={_NSPoint=ff}{_NSSize=ff}}',
            type_modifier: 'o' },
          { type64: 'd', type: 'f' },
          { type64: 'Q', type: 'i' } ] },
     { name: 'NSEndHashTableEnumeration',
       arg: 
        [ { type64: '^{_NSHashEnumerator=QQ^v}',
            type: '^{_NSHashEnumerator=II^v}',
            type_modifier: 'n' } ] },
     { name: 'NSEndMapTableEnumeration',
       arg: 
        [ { type64: '^{_NSMapEnumerator=QQ^v}',
            type: '^{_NSMapEnumerator=II^v}',
            type_modifier: 'n' } ] },
     { name: 'NSEnumerateHashTable',
       arg: [ { type: '@' } ],
       retval: 
        [ { type64: '{_NSHashEnumerator=QQ^v}',
            type: '{_NSHashEnumerator=II^v}' } ] },
     { name: 'NSEnumerateMapTable',
       arg: [ { type: '@' } ],
       retval: 
        [ { type64: '{_NSMapEnumerator=QQ^v}',
            type: '{_NSMapEnumerator=II^v}' } ] },
     { name: 'NSEqualPoints',
       arg: 
        [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' },
          { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSEqualRanges',
       inline: 'true',
       arg: 
        [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
          { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSEqualRects',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSEqualSizes',
       arg: 
        [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' },
          { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSExtraRefCount',
       arg: [ { type: '@' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSFileTypeForHFSTypeCode',
       arg: [ { type64: 'I', type: 'L' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSFrameAddress',
       arg: [ { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSFreeHashTable', arg: [ { type: '@' } ] },
     { name: 'NSFreeMapTable', arg: [ { type: '@' } ] },
     { name: 'NSFullUserName', retval: [ { type: '@' } ] },
     { name: 'NSGetSizeAndAlignment',
       arg: 
        [ { type: '*', type_modifier: 'o' },
          { type64: '^Q', type: '^I', type_modifier: 'o' },
          { type64: '^Q', type: '^I', type_modifier: 'o' } ],
       retval: [ { type: '*' } ] },
     { name: 'NSGetUncaughtExceptionHandler',
       retval: 
        [ { function_pointer: 'true',
            type: '^?',
            arg: [ { type: '@' } ],
            retval: [ { type: 'v' } ] } ] },
     { name: 'NSHFSTypeCodeFromFileType',
       arg: [ { type: '@' } ],
       retval: [ { type64: 'I', type: 'L' } ] },
     { name: 'NSHFSTypeOfFile',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSHashGet',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSHashInsert',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSHashInsertIfAbsent',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSHashInsertKnownAbsent',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSHashRemove',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSHeight',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSHomeDirectory', retval: [ { type: '@' } ] },
     { name: 'NSHomeDirectoryForUser',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSHostByteOrder',
       inline: 'true',
       retval: [ { type64: 'q', type: 'l' } ] },
     { name: 'NSIncrementExtraRefCount', arg: [ { type: '@' } ] },
     { name: 'NSInsetRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: 'd', type: 'f' },
          { type64: 'd', type: 'f' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSIntegralRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSIntegralRectWithOptions',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type: 'Q' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSIntersectionRange',
       arg: 
        [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
          { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ] },
     { name: 'NSIntersectionRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSIntersectsRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSIsEmptyRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSIsFreedObject',
       arg: [ { type: '@' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSLocationInRange',
       inline: 'true',
       arg: 
        [ { type64: 'Q', type: 'I' },
          { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSLog',
       variadic: 'true',
       arg: [ { printf_format: 'true', type: '@' } ] },
     { name: 'NSLogPageSize',
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSLogv',
       arg: 
        [ { printf_format: 'true', type: '@' },
          { type64: '^{__va_list_tag=II^v^v}', type: '*' } ] },
     { name: 'NSMakeCollectable',
       inline: 'true',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSMakePoint',
       inline: 'true',
       arg: [ { type64: 'd', type: 'f' }, { type64: 'd', type: 'f' } ],
       retval: [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ] },
     { name: 'NSMakeRange',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'I' }, { type64: 'Q', type: 'I' } ],
       retval: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ] },
     { name: 'NSMakeRect',
       inline: 'true',
       arg: 
        [ { type64: 'd', type: 'f' },
          { type64: 'd', type: 'f' },
          { type64: 'd', type: 'f' },
          { type64: 'd', type: 'f' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSMakeSize',
       inline: 'true',
       arg: [ { type64: 'd', type: 'f' }, { type64: 'd', type: 'f' } ],
       retval: [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ] },
     { name: 'NSMapGet',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSMapInsert',
       arg: 
        [ { type: '@' },
          { type: '^v', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSMapInsertIfAbsent',
       arg: 
        [ { type: '@' },
          { type: '^v', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSMapInsertKnownAbsent',
       arg: 
        [ { type: '@' },
          { type: '^v', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSMapMember',
       arg: 
        [ { type: '@' },
          { type: '^v', type_modifier: 'n' },
          { type: '^^v', type_modifier: 'o' },
          { type: '^^v', type_modifier: 'o' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSMapRemove',
       arg: [ { type: '@' }, { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSMaxRange',
       inline: 'true',
       arg: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSMaxX',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMaxY',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMidX',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMidY',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMinX',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMinY',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSMouseInRect',
       arg: 
        [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type: 'B' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSNextHashEnumeratorItem',
       arg: 
        [ { type64: '^{_NSHashEnumerator=QQ^v}',
            type: '^{_NSHashEnumerator=II^v}',
            type_modifier: 'n' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSNextMapEnumeratorPair',
       arg: 
        [ { type64: '^{_NSMapEnumerator=QQ^v}',
            type: '^{_NSMapEnumerator=II^v}',
            type_modifier: 'n' },
          { type: '^^v', type_modifier: 'o' },
          { type: '^^v', type_modifier: 'o' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSOffsetRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: 'd', type: 'f' },
          { type64: 'd', type: 'f' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSOpenStepRootDirectory', retval: [ { type: '@' } ] },
     { name: 'NSPageSize', retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSPointFromCGPoint',
       inline: 'true',
       arg: [ { type64: '{CGPoint=dd}', type: '{CGPoint=ff}' } ],
       retval: [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ] },
     { name: 'NSPointFromString',
       arg: [ { type: '@' } ],
       retval: [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ] },
     { name: 'NSPointInRect',
       arg: 
        [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSPointToCGPoint',
       inline: 'true',
       arg: [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ],
       retval: [ { type64: '{CGPoint=dd}', type: '{CGPoint=ff}' } ] },
     { name: 'NSProtocolFromString',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSRangeFromString',
       arg: [ { type: '@' } ],
       retval: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ] },
     { name: 'NSRealMemoryAvailable',
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSReallocateCollectable',
       arg: 
        [ { type: '^v', type_modifier: 'n' },
          { type64: 'Q', type: 'I' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSRecordAllocationEvent',
       arg: [ { type: 'i' }, { type: '@' } ] },
     { name: 'NSRectFromCGRect',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{CGRect={CGPoint=ff}{CGSize=ff}}' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSRectFromString',
       arg: [ { type: '@' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSRectToCGRect',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{CGRect={CGPoint=ff}{CGSize=ff}}' } ] },
     { name: 'NSRecycleZone',
       arg: [ { type: '^{_NSZone=}', type_modifier: 'n' } ] },
     { name: 'NSResetHashTable', arg: [ { type: '@' } ] },
     { name: 'NSResetMapTable', arg: [ { type: '@' } ] },
     { name: 'NSReturnAddress',
       arg: [ { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSRoundDownToMultipleOfPageSize',
       arg: [ { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSRoundUpToMultipleOfPageSize',
       arg: [ { type64: 'Q', type: 'I' } ],
       retval: [ { type64: 'Q', type: 'I' } ] },
     { name: 'NSSearchPathForDirectoriesInDomains',
       arg: 
        [ { type64: 'Q', type: 'I' },
          { type64: 'Q', type: 'I' },
          { type: 'B' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSSelectorFromString',
       arg: [ { type: '@' } ],
       retval: [ { type: ':' } ] },
     { name: 'NSSetUncaughtExceptionHandler',
       arg: 
        [ { function_pointer: 'true',
            type: '^?',
            type_modifier: 'n',
            arg: [ { type: '@' } ],
            retval: [ { type: 'v' } ] } ] },
     { name: 'NSSetZoneName',
       arg: [ { type: '^{_NSZone=}', type_modifier: 'n' }, { type: '@' } ] },
     { name: 'NSShouldRetainWithZone',
       arg: [ { type: '@' }, { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: 'B' } ] },
     { name: 'NSSizeFromCGSize',
       inline: 'true',
       arg: [ { type64: '{CGSize=dd}', type: '{CGSize=ff}' } ],
       retval: [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ] },
     { name: 'NSSizeFromString',
       arg: [ { type: '@' } ],
       retval: [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ] },
     { name: 'NSSizeToCGSize',
       inline: 'true',
       arg: [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ],
       retval: [ { type64: '{CGSize=dd}', type: '{CGSize=ff}' } ] },
     { name: 'NSStringFromClass',
       arg: [ { type: '#' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromHashTable',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromMapTable',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromPoint',
       arg: [ { type64: '{CGPoint=dd}', type: '{_NSPoint=ff}' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromProtocol',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromRange',
       arg: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromSelector',
       arg: [ { type: ':' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSStringFromSize',
       arg: [ { type64: '{CGSize=dd}', type: '{_NSSize=ff}' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSSwapBigDoubleToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedDouble=Q}' } ],
       retval: [ { type: 'd' } ] },
     { name: 'NSSwapBigFloatToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedFloat=I}' } ],
       retval: [ { type: 'f' } ] },
     { name: 'NSSwapBigIntToHost',
       inline: 'true',
       arg: [ { type: 'I' } ],
       retval: [ { type: 'I' } ] },
     { name: 'NSSwapBigLongLongToHost',
       inline: 'true',
       arg: [ { type: 'Q' } ],
       retval: [ { type: 'Q' } ] },
     { name: 'NSSwapBigLongToHost',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'L' } ],
       retval: [ { type64: 'Q', type: 'L' } ] },
     { name: 'NSSwapBigShortToHost',
       inline: 'true',
       arg: [ { type: 'S' } ],
       retval: [ { type: 'S' } ] },
     { name: 'NSSwapDouble',
       inline: 'true',
       arg: [ { type: '{_NSSwappedDouble=Q}' } ],
       retval: [ { type: '{_NSSwappedDouble=Q}' } ] },
     { name: 'NSSwapFloat',
       inline: 'true',
       arg: [ { type: '{_NSSwappedFloat=I}' } ],
       retval: [ { type: '{_NSSwappedFloat=I}' } ] },
     { name: 'NSSwapHostDoubleToBig',
       inline: 'true',
       arg: [ { type: 'd' } ],
       retval: [ { type: '{_NSSwappedDouble=Q}' } ] },
     { name: 'NSSwapHostDoubleToLittle',
       inline: 'true',
       arg: [ { type: 'd' } ],
       retval: [ { type: '{_NSSwappedDouble=Q}' } ] },
     { name: 'NSSwapHostFloatToBig',
       inline: 'true',
       arg: [ { type: 'f' } ],
       retval: [ { type: '{_NSSwappedFloat=I}' } ] },
     { name: 'NSSwapHostFloatToLittle',
       inline: 'true',
       arg: [ { type: 'f' } ],
       retval: [ { type: '{_NSSwappedFloat=I}' } ] },
     { name: 'NSSwapHostIntToBig',
       inline: 'true',
       arg: [ { type: 'I' } ],
       retval: [ { type: 'I' } ] },
     { name: 'NSSwapHostIntToLittle',
       inline: 'true',
       arg: [ { type: 'I' } ],
       retval: [ { type: 'I' } ] },
     { name: 'NSSwapHostLongLongToBig',
       inline: 'true',
       arg: [ { type: 'Q' } ],
       retval: [ { type: 'Q' } ] },
     { name: 'NSSwapHostLongLongToLittle',
       inline: 'true',
       arg: [ { type: 'Q' } ],
       retval: [ { type: 'Q' } ] },
     { name: 'NSSwapHostLongToBig',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'L' } ],
       retval: [ { type64: 'Q', type: 'L' } ] },
     { name: 'NSSwapHostLongToLittle',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'L' } ],
       retval: [ { type64: 'Q', type: 'L' } ] },
     { name: 'NSSwapHostShortToBig',
       inline: 'true',
       arg: [ { type: 'S' } ],
       retval: [ { type: 'S' } ] },
     { name: 'NSSwapHostShortToLittle',
       inline: 'true',
       arg: [ { type: 'S' } ],
       retval: [ { type: 'S' } ] },
     { name: 'NSSwapInt',
       inline: 'true',
       arg: [ { type: 'I' } ],
       retval: [ { type: 'I' } ] },
     { name: 'NSSwapLittleDoubleToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedDouble=Q}' } ],
       retval: [ { type: 'd' } ] },
     { name: 'NSSwapLittleFloatToHost',
       inline: 'true',
       arg: [ { type: '{_NSSwappedFloat=I}' } ],
       retval: [ { type: 'f' } ] },
     { name: 'NSSwapLittleIntToHost',
       inline: 'true',
       arg: [ { type: 'I' } ],
       retval: [ { type: 'I' } ] },
     { name: 'NSSwapLittleLongLongToHost',
       inline: 'true',
       arg: [ { type: 'Q' } ],
       retval: [ { type: 'Q' } ] },
     { name: 'NSSwapLittleLongToHost',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'L' } ],
       retval: [ { type64: 'Q', type: 'L' } ] },
     { name: 'NSSwapLittleShortToHost',
       inline: 'true',
       arg: [ { type: 'S' } ],
       retval: [ { type: 'S' } ] },
     { name: 'NSSwapLong',
       inline: 'true',
       arg: [ { type64: 'Q', type: 'L' } ],
       retval: [ { type64: 'Q', type: 'L' } ] },
     { name: 'NSSwapLongLong',
       inline: 'true',
       arg: [ { type: 'Q' } ],
       retval: [ { type: 'Q' } ] },
     { name: 'NSSwapShort',
       inline: 'true',
       arg: [ { type: 'S' } ],
       retval: [ { type: 'S' } ] },
     { name: 'NSTemporaryDirectory', retval: [ { type: '@' } ] },
     { name: 'NSUnionRange',
       arg: 
        [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
          { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ],
       retval: [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' } ] },
     { name: 'NSUnionRect',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' },
          { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ] },
     { name: 'NSUserName', retval: [ { type: '@' } ] },
     { name: 'NSWidth',
       inline: 'true',
       arg: 
        [ { type64: '{CGRect={CGPoint=dd}{CGSize=dd}}',
            type: '{_NSRect={_NSPoint=ff}{_NSSize=ff}}' } ],
       retval: [ { type64: 'd', type: 'f' } ] },
     { name: 'NSZoneCalloc',
       arg: 
        [ { type: '^{_NSZone=}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSZoneFree',
       arg: 
        [ { type: '^{_NSZone=}', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' } ] },
     { name: 'NSZoneFromPointer',
       arg: [ { type: '^v', type_modifier: 'n' } ],
       retval: [ { type: '^{_NSZone=}' } ] },
     { name: 'NSZoneMalloc',
       arg: 
        [ { type: '^{_NSZone=}', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NSZoneName',
       arg: [ { type: '^{_NSZone=}', type_modifier: 'n' } ],
       retval: [ { type: '@' } ] },
     { name: 'NSZoneRealloc',
       arg: 
        [ { type: '^{_NSZone=}', type_modifier: 'n' },
          { type: '^v', type_modifier: 'n' },
          { type64: 'Q', type: 'I' } ],
       retval: [ { type: '^v' } ] },
     { name: 'NXReadNSObjectFromCoder',
       arg: [ { type: '@' } ],
       retval: [ { type: '@' } ] } ],
  class: 
   [ { name: 'NSAffineTransform',
       method: 
        [ { selector: 'setTransformStruct:',
            arg: 
             [ { type64: '{_NSAffineTransformStruct=dddddd}',
                 type: '{_NSAffineTransformStruct=ffffff}',
                 index: '0' } ] },
          { selector: 'transformStruct',
            retval: 
             [ { type64: '{_NSAffineTransformStruct=dddddd}',
                 type: '{_NSAffineTransformStruct=ffffff}' } ] } ] },
     { name: 'NSAppleEventDescriptor',
       method: 
        [ { selector: 'booleanValue', retval: [ { type: 'B' } ] },
          { selector: 'descriptorWithBoolean:',
            class_method: 'true',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'descriptorWithDescriptorType:bytes:length:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] },
          { selector: 'initWithAEDescNoCopy:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'initWithDescriptorType:bytes:length:',
            arg: [ { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] } ] },
     { name: 'NSAppleEventManager',
       method: 
        [ { selector: 'dispatchRawAppleEvent:withRawReply:handlerRefCon:',
            arg: 
             [ { index: '0', type_modifier: 'n' },
               { index: '1', type_modifier: 'o' } ] },
          { selector: 'setEventHandler:andSelector:forEventClass:andEventID:',
            arg: 
             [ { sel_of_type: 'v16@0:4@8@12',
                 index: '1',
                 sel_of_type64: 'v32@0:8@16@24' } ] } ] },
     { name: 'NSAppleScript',
       method: 
        [ { selector: 'compileAndReturnError:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'executeAndReturnError:',
            arg: [ { index: '0', type_modifier: 'o' } ] },
          { selector: 'executeAppleEvent:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'initWithContentsOfURL:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'isCompiled', retval: [ { type: 'B' } ] } ] },
     { name: 'NSArchiver',
       method: 
        [ { selector: 'archiveRootObject:toFile:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSArray',
       method: 
        [ { selector: 'addObserver:forKeyPath:options:context:',
            arg: [ { index: '3', type_modifier: 'n' } ] },
          { selector: 'addObserver:toObjectsAtIndexes:forKeyPath:options:context:',
            arg: [ { index: '4', type_modifier: 'n' } ] },
          { variadic: 'true',
            sentinel: '0',
            selector: 'arrayWithObjects:',
            class_method: 'true' },
          { selector: 'arrayWithObjects:count:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'containsObject:', retval: [ { type: 'B' } ] },
          { selector: 'enumerateObjectsAtIndexes:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateObjectsUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateObjectsWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { suggestion: 'Call the usual object accessors.',
            ignore: 'true',
            selector: 'getObjects:' },
          { suggestion: 'Call the usual object accessors.',
            ignore: 'true',
            selector: 'getObjects:range:' },
          { selector: 'indexOfObject:inSortedRange:options:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'indexOfObjectAtIndexes:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexOfObjectPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexOfObjectWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsAtIndexes:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'initWithArray:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { variadic: 'true', sentinel: '0', selector: 'initWithObjects:' },
          { selector: 'initWithObjects:count:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'isEqualToArray:', retval: [ { type: 'B' } ] },
          { selector: 'makeObjectsPerformSelector:',
            arg: [ { sel_of_type: 'v8@0:4', index: '0', sel_of_type64: 'v16@0:8' } ] },
          { selector: 'makeObjectsPerformSelector:withObject:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '0',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'sortedArrayUsingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortedArrayUsingFunction:context:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 type_modifier: 'n',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^v' } ],
                 retval: [ { type64: 'q', type: 'i' } ] },
               { index: '1', type_modifier: 'n' } ] },
          { selector: 'sortedArrayUsingFunction:context:hint:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 type_modifier: 'n',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^v' } ],
                 retval: [ { type64: 'q', type: 'i' } ] },
               { index: '1', type_modifier: 'n' } ] },
          { selector: 'sortedArrayUsingSelector:',
            arg: 
             [ { sel_of_type: 'i12@0:4@8',
                 index: '0',
                 sel_of_type64: 'q24@0:8@16' } ] },
          { selector: 'sortedArrayWithOptions:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'writeToFile:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSAssertionHandler',
       method: 
        [ { variadic: 'true',
            selector: 'handleFailureInFunction:file:lineNumber:description:',
            arg: [ { printf_format: 'true', index: '3' } ] },
          { variadic: 'true',
            selector: 'handleFailureInMethod:object:file:lineNumber:description:',
            arg: [ { printf_format: 'true', index: '4' } ] } ] },
     { name: 'NSAttributedString',
       method: 
        [ { selector: 'attribute:atIndex:effectiveRange:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'attribute:atIndex:longestEffectiveRange:inRange:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'attributesAtIndex:effectiveRange:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'attributesAtIndex:longestEffectiveRange:inRange:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'enumerateAttribute:inRange:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: 
                  [ { type: '@' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateAttributesInRange:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: 
                  [ { type: '@' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'isEqualToAttributedString:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSBlockOperation',
       method: 
        [ { selector: 'addExecutionBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'blockOperationWithBlock:',
            class_method: 'true',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSBundle',
       method: 
        [ { selector: 'isLoaded', retval: [ { type: 'B' } ] },
          { selector: 'load', retval: [ { type: 'B' } ] },
          { selector: 'loadAndReturnError:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'preflightAndReturnError:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'unload', retval: [ { type: 'B' } ] } ] },
     { name: 'NSCache',
       method: 
        [ { selector: 'evictsObjectsWithDiscardedContent',
            retval: [ { type: 'B' } ] },
          { selector: 'setEvictsObjectsWithDiscardedContent:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSCalendar',
       method: 
        [ { selector: 'rangeOfUnit:startDate:interval:forDate:',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSCalendarDate',
       method: 
        [ { selector: 'years:months:days:hours:minutes:seconds:sinceDate:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' },
               { index: '3', type_modifier: 'o' },
               { index: '4', type_modifier: 'o' },
               { index: '5', type_modifier: 'o' } ] } ] },
     { name: 'NSCharacterSet',
       method: 
        [ { selector: 'characterIsMember:', retval: [ { type: 'B' } ] },
          { selector: 'hasMemberInPlane:', retval: [ { type: 'B' } ] },
          { selector: 'isSupersetOfSet:', retval: [ { type: 'B' } ] },
          { selector: 'longCharacterIsMember:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSCoder',
       method: 
        [ { selector: 'allowsKeyedCoding', retval: [ { type: 'B' } ] },
          { selector: 'containsValueForKey:', retval: [ { type: 'B' } ] },
          { selector: 'decodeArrayOfObjCType:count:at:',
            arg: 
             [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' },
               { index: '2', type_modifier: 'n' } ] },
          { selector: 'decodeBoolForKey:', retval: [ { type: 'B' } ] },
          { selector: 'decodeBytesForKey:returnedLength:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'decodeBytesWithReturnedLength:',
            arg: [ { index: '0', type_modifier: 'o' } ] },
          { selector: 'decodeValueOfObjCType:at:',
            arg: [ { index: '1', type_modifier: 'n' } ] },
          { variadic: 'true',
            suggestion: 'Call decodeValueOfObjCType:at: several times.',
            ignore: 'true',
            selector: 'decodeValuesOfObjCTypes:' },
          { selector: 'encodeArrayOfObjCType:count:at:',
            arg: 
             [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' },
               { index: '2', type_modifier: 'n' } ] },
          { selector: 'encodeBool:forKey:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'encodeBytes:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'encodeBytes:length:forKey:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'encodeValueOfObjCType:at:',
            arg: [ { index: '1', type_modifier: 'n' } ] },
          { variadic: 'true',
            suggestion: 'Call encodeValueOfObjCType:at: several times.',
            ignore: 'true',
            selector: 'encodeValuesOfObjCTypes:' } ] },
     { name: 'NSComparisonPredicate',
       method: 
        [ { selector: 'initWithLeftExpression:rightExpression:customSelector:',
            arg: 
             [ { sel_of_type: 'B12@0:4@8',
                 index: '2',
                 sel_of_type64: 'B24@0:8@16' } ] },
          { selector: 'predicateWithLeftExpression:rightExpression:customSelector:',
            class_method: 'true',
            arg: 
             [ { sel_of_type: 'B12@0:4@8',
                 index: '2',
                 sel_of_type64: 'B24@0:8@16' } ] } ] },
     { name: 'NSCondition',
       method: [ { selector: 'waitUntilDate:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSConditionLock',
       method: 
        [ { selector: 'lockBeforeDate:', retval: [ { type: 'B' } ] },
          { selector: 'lockWhenCondition:beforeDate:',
            retval: [ { type: 'B' } ] },
          { selector: 'tryLock', retval: [ { type: 'B' } ] },
          { selector: 'tryLockWhenCondition:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSConnection',
       method: 
        [ { selector: 'independentConversationQueueing',
            retval: [ { type: 'B' } ] },
          { selector: 'isValid', retval: [ { type: 'B' } ] },
          { selector: 'multipleThreadsEnabled',
            retval: [ { type: 'B' } ] },
          { selector: 'registerName:', retval: [ { type: 'B' } ] },
          { selector: 'registerName:withNameServer:',
            retval: [ { type: 'B' } ] },
          { selector: 'setIndependentConversationQueueing:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSData',
       method: 
        [ { selector: 'dataWithBytes:length:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { suggestion: 'Call dataWithBytes:length:.',
            ignore: 'true',
            selector: 'dataWithBytesNoCopy:length:',
            class_method: 'true' },
          { suggestion: 'Call dataWithBytes:length:.',
            ignore: 'true',
            selector: 'dataWithBytesNoCopy:length:freeWhenDone:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'dataWithContentsOfFile:options:error:',
            class_method: 'true',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'dataWithContentsOfURL:options:error:',
            class_method: 'true',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { suggestion: 'Call bytes or getBytes:length:.',
            ignore: 'true',
            selector: 'getBytes:' },
          { selector: 'getBytes:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'o' } ] },
          { suggestion: 'Call bytes or getBytes:length:.',
            ignore: 'true',
            selector: 'getBytes:range:' },
          { selector: 'initWithBytes:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { suggestion: 'Call initWithBytes:length:.',
            ignore: 'true',
            selector: 'initWithBytesNoCopy:length:' },
          { suggestion: 'Call initWithBytes:length:.',
            ignore: 'true',
            selector: 'initWithBytesNoCopy:length:freeWhenDone:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'initWithContentsOfFile:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithContentsOfURL:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'isEqualToData:', retval: [ { type: 'B' } ] },
          { selector: 'writeToFile:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToFile:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSDate',
       method: [ { selector: 'isEqualToDate:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSDateFormatter',
       method: 
        [ { selector: 'allowsNaturalLanguage', retval: [ { type: 'B' } ] },
          { selector: 'doesRelativeDateFormatting',
            retval: [ { type: 'B' } ] },
          { selector: 'generatesCalendarDates',
            retval: [ { type: 'B' } ] },
          { selector: 'getObjectValue:forString:range:error:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'N' },
               { index: '3', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'initWithDateFormat:allowNaturalLanguage:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'isLenient', retval: [ { type: 'B' } ] },
          { selector: 'setDoesRelativeDateFormatting:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setGeneratesCalendarDates:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setLenient:', arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSDecimalNumber',
       method: 
        [ { selector: 'decimalNumberWithDecimal:',
            class_method: 'true',
            arg: [ { type: '{_NSDecimal=b8b4b1b1b18[8S]}', index: '0' } ] },
          { selector: 'decimalNumberWithMantissa:exponent:isNegative:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'decimalValue',
            retval: [ { type: '{_NSDecimal=b8b4b1b1b18[8S]}' } ] },
          { selector: 'initWithDecimal:',
            arg: [ { type: '{_NSDecimal=b8b4b1b1b18[8S]}', index: '0' } ] },
          { selector: 'initWithMantissa:exponent:isNegative:',
            arg: [ { type: 'B', index: '2' } ] } ] },
     { name: 'NSDecimalNumberHandler',
       method: 
        [ { selector: 'decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:',
            class_method: 'true',
            arg: 
             [ { type: 'B', index: '2' },
               { type: 'B', index: '3' },
               { type: 'B', index: '4' },
               { type: 'B', index: '5' } ] },
          { selector: 'initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:',
            arg: 
             [ { type: 'B', index: '2' },
               { type: 'B', index: '3' },
               { type: 'B', index: '4' },
               { type: 'B', index: '5' } ] } ] },
     { name: 'NSDictionary',
       method: 
        [ { selector: 'dictionaryWithObjects:forKeys:count:',
            class_method: 'true',
            arg: 
             [ { c_array_length_in_arg: '2', index: '0', type_modifier: 'n' },
               { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] },
          { variadic: 'true',
            sentinel: '0',
            selector: 'dictionaryWithObjectsAndKeys:',
            class_method: 'true' },
          { selector: 'enumerateKeysAndObjectsUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateKeysAndObjectsWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'fileExtensionHidden', retval: [ { type: 'B' } ] },
          { selector: 'fileIsAppendOnly', retval: [ { type: 'B' } ] },
          { selector: 'fileIsImmutable', retval: [ { type: 'B' } ] },
          { selector: 'getObjects:andKeys:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' } ] },
          { selector: 'initWithDictionary:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithObjects:forKeys:count:',
            arg: 
             [ { c_array_length_in_arg: '2', index: '0', type_modifier: 'n' },
               { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] },
          { variadic: 'true',
            sentinel: '0',
            selector: 'initWithObjectsAndKeys:' },
          { selector: 'isEqualToDictionary:', retval: [ { type: 'B' } ] },
          { selector: 'keysOfEntriesPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'keysOfEntriesWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'keysSortedByValueUsingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'keysSortedByValueUsingSelector:',
            arg: 
             [ { sel_of_type: 'i12@0:4@8',
                 index: '0',
                 sel_of_type64: 'q24@0:8@16' } ] },
          { selector: 'keysSortedByValueWithOptions:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'writeToFile:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSDistantObject',
       method: 
        [ { selector: 'setProtocolForProxy:',
            arg: [ { index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSDistributedLock',
       method: [ { selector: 'tryLock', retval: [ { type: 'B' } ] } ] },
     { name: 'NSDistributedNotificationCenter',
       method: 
        [ { selector: 'addObserver:selector:name:object:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'addObserver:selector:name:object:suspensionBehavior:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'postNotificationName:object:userInfo:deliverImmediately:',
            arg: [ { type: 'B', index: '3' } ] },
          { selector: 'setSuspended:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'suspended', retval: [ { type: 'B' } ] } ] },
     { name: 'NSException',
       method: 
        [ { variadic: 'true',
            selector: 'raise:format:',
            class_method: 'true',
            arg: [ { printf_format: 'true', index: '1' } ] },
          { selector: 'raise:format:arguments:', class_method: 'true' } ] },
     { name: 'NSExpression',
       method: 
        [ { selector: 'expressionForBlock:arguments:',
            class_method: 'true',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' }, { type: '@' } ],
                 retval: [ { type: '@' } ] } ] } ] },
     { name: 'NSFileCoordinator',
       method: 
        [ { selector: 'coordinateReadingItemAtURL:options:error:byAccessor:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '5',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'coordinateWritingItemAtURL:options:error:byAccessor:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '5',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '5',
                 arg: [ { type: '@?' } ],
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSFileHandle',
       method: 
        [ { selector: 'initWithFileDescriptor:closeOnDealloc:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'setReadabilityHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'setWriteabilityHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSFileManager',
       method: 
        [ { selector: 'URLForDirectory:inDomain:appropriateForURL:create:error:',
            arg: [ { type: 'B', index: '3' } ] },
          { selector: 'attributesOfFileSystemForPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'attributesOfItemAtPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'changeCurrentDirectoryPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'changeFileAttributes:atPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'contentsEqualAtPath:andPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'contentsOfDirectoryAtPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'copyItemAtPath:toPath:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'copyItemAtURL:toURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'copyPath:toPath:handler:',
            retval: [ { type: 'B' } ] },
          { selector: 'createDirectoryAtPath:attributes:',
            retval: [ { type: 'B' } ] },
          { selector: 'createDirectoryAtPath:withIntermediateDirectories:attributes:error:',
            arg: 
             [ { type: 'B', index: '1' },
               { index: '3', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'createDirectoryAtURL:withIntermediateDirectories:attributes:error:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'createFileAtPath:contents:attributes:',
            retval: [ { type: 'B' } ] },
          { selector: 'createSymbolicLinkAtPath:pathContent:',
            retval: [ { type: 'B' } ] },
          { selector: 'createSymbolicLinkAtPath:withDestinationPath:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'createSymbolicLinkAtURL:withDestinationURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'destinationOfSymbolicLinkAtPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'evictUbiquitousItemAtURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileAttributesAtPath:traverseLink:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'fileExistsAtPath:', retval: [ { type: 'B' } ] },
          { selector: 'fileExistsAtPath:isDirectory:',
            arg: [ { type: '^B', index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'isDeletableFileAtPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'isExecutableFileAtPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'isReadableFileAtPath:', retval: [ { type: 'B' } ] },
          { selector: 'isUbiquitousItemAtURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'isWritableFileAtPath:', retval: [ { type: 'B' } ] },
          { selector: 'linkItemAtPath:toPath:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'linkItemAtURL:toURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'linkPath:toPath:handler:',
            retval: [ { type: 'B' } ] },
          { selector: 'moveItemAtPath:toPath:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'moveItemAtURL:toURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'movePath:toPath:handler:',
            retval: [ { type: 'B' } ] },
          { selector: 'removeFileAtPath:handler:',
            retval: [ { type: 'B' } ] },
          { selector: 'removeItemAtPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'removeItemAtURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'setAttributes:ofItemAtPath:error:',
            arg: [ { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'setUbiquitous:itemAtURL:destinationURL:error:',
            arg: [ { type: 'B', index: '0' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'startDownloadingUbiquitousItemAtURL:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'stringWithFileSystemRepresentation:length:',
            arg: [ { c_array_of_fixed_length: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'subpathsOfDirectoryAtPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] } ] },
     { name: 'NSFileVersion',
       method: 
        [ { selector: 'isConflict', retval: [ { type: 'B' } ] },
          { selector: 'isDiscardable', retval: [ { type: 'B' } ] },
          { selector: 'isResolved', retval: [ { type: 'B' } ] },
          { selector: 'removeAndReturnError:', retval: [ { type: 'B' } ] },
          { selector: 'removeOtherVersionsOfItemAtURL:error:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'setDiscardable:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setResolved:', arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSFileWrapper',
       method: 
        [ { selector: 'isDirectory', retval: [ { type: 'B' } ] },
          { selector: 'isRegularFile', retval: [ { type: 'B' } ] },
          { selector: 'isSymbolicLink', retval: [ { type: 'B' } ] },
          { selector: 'matchesContentsOfURL:', retval: [ { type: 'B' } ] },
          { selector: 'needsToBeUpdatedFromPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'readFromURL:options:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'updateFromPath:', retval: [ { type: 'B' } ] },
          { selector: 'writeToFile:atomically:updateFilenames:',
            arg: [ { type: 'B', index: '1' }, { type: 'B', index: '2' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:options:originalContentsURL:error:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSFormatter',
       method: 
        [ { selector: 'getObjectValue:forString:errorDescription:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'isPartialStringValid:newEditingString:errorDescription:',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' },
               { index: '4', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSGarbageCollector',
       method: 
        [ { selector: 'disableCollectorForPointer:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'enableCollectorForPointer:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'isCollecting', retval: [ { type: 'B' } ] },
          { selector: 'isEnabled', retval: [ { type: 'B' } ] } ] },
     { name: 'NSHTTPCookie',
       method: 
        [ { selector: 'isHTTPOnly', retval: [ { type: 'B' } ] },
          { selector: 'isSecure', retval: [ { type: 'B' } ] },
          { selector: 'isSessionOnly', retval: [ { type: 'B' } ] } ] },
     { name: 'NSHashTable',
       method: 
        [ { selector: 'containsObject:', retval: [ { type: 'B' } ] },
          { selector: 'intersectsHashTable:', retval: [ { type: 'B' } ] },
          { selector: 'isEqualToHashTable:', retval: [ { type: 'B' } ] },
          { selector: 'isSubsetOfHashTable:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSHost',
       method: 
        [ { selector: 'isEqualToHost:', retval: [ { type: 'B' } ] },
          { selector: 'isHostCacheEnabled',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'setHostCacheEnabled:',
            class_method: 'true',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSIndexPath',
       method: 
        [ { suggestion: 'Call the usual accessors.',
            ignore: 'true',
            selector: 'getIndexes:' },
          { selector: 'indexPathWithIndexes:length:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'initWithIndexes:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSIndexSet',
       method: 
        [ { selector: 'containsIndex:', retval: [ { type: 'B' } ] },
          { selector: 'containsIndexes:', retval: [ { type: 'B' } ] },
          { selector: 'containsIndexesInRange:',
            retval: [ { type: 'B' } ] },
          { selector: 'enumerateIndexesInRange:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateIndexesUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateIndexesWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateRangesInRange:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: 
                  [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateRangesUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: 
                  [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateRangesWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: 
                  [ { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'getIndexes:maxCount:inIndexRange:',
            arg: 
             [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' },
               { index: '2', type_modifier: 'N' } ] },
          { selector: 'indexInRange:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesInRange:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'intersectsIndexesInRange:',
            retval: [ { type: 'B' } ] },
          { selector: 'isEqualToIndexSet:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSInputStream',
       method: 
        [ { ignore: 'true',
            selector: 'getBuffer:length:',
            retval: [ { type: 'B' } ] },
          { selector: 'hasBytesAvailable', retval: [ { type: 'B' } ] },
          { selector: 'read:maxLength:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'o' } ] } ] },
     { name: 'NSInvocation',
       method: 
        [ { selector: 'argumentsRetained', retval: [ { type: 'B' } ] },
          { ignore: 'true', selector: 'getArgument:atIndex:' },
          { ignore: 'true', selector: 'getReturnValue:' },
          { selector: 'setArgument:atIndex:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'setReturnValue:',
            arg: [ { index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSInvocationOperation',
       method: 
        [ { selector: 'initWithTarget:selector:object:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] } ] },
     { name: 'NSJSONSerialization',
       method: 
        [ { selector: 'isValidJSONObject:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSKeyedArchiver',
       method: 
        [ { selector: 'archiveRootObject:toFile:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'encodeBool:forKey:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'encodeBytes:length:forKey:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSKeyedUnarchiver',
       method: 
        [ { selector: 'containsValueForKey:', retval: [ { type: 'B' } ] },
          { selector: 'decodeBoolForKey:', retval: [ { type: 'B' } ] },
          { selector: 'decodeBytesForKey:returnedLength:',
            arg: [ { index: '1', type_modifier: 'o' } ] } ] },
     { name: 'NSLinguisticTagger',
       method: 
        [ { selector: 'enumerateTagsInRange:scheme:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: 
                  [ { type: '@' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSLock',
       method: 
        [ { selector: 'lockBeforeDate:', retval: [ { type: 'B' } ] },
          { selector: 'tryLock', retval: [ { type: 'B' } ] } ] },
     { name: 'NSMachBootstrapServer',
       method: [ { selector: 'registerPort:name:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSMetadataQuery',
       method: 
        [ { selector: 'isGathering', retval: [ { type: 'B' } ] },
          { selector: 'isStarted', retval: [ { type: 'B' } ] },
          { selector: 'isStopped', retval: [ { type: 'B' } ] },
          { selector: 'startQuery', retval: [ { type: 'B' } ] } ] },
     { name: 'NSMethodSignature',
       method: [ { selector: 'isOneway', retval: [ { type: 'B' } ] } ] },
     { name: 'NSMutableArray',
       method: 
        [ { selector: 'removeObjectsFromIndices:numIndices:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'sortUsingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortUsingFunction:context:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 type_modifier: 'n',
                 arg: [ { type: '@' }, { type: '@' }, { type: '^v' } ],
                 retval: [ { type64: 'q', type: 'i' } ] },
               { index: '1', type_modifier: 'n' } ] },
          { selector: 'sortUsingSelector:',
            arg: 
             [ { sel_of_type: 'i12@0:4@8',
                 index: '0',
                 sel_of_type64: 'q24@0:8@16' } ] },
          { selector: 'sortWithOptions:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] } ] },
     { name: 'NSMutableData',
       method: 
        [ { selector: 'appendBytes:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { suggestion: 'Call replaceBytesInRange:withBytes:length:.',
            ignore: 'true',
            selector: 'replaceBytesInRange:withBytes:' },
          { selector: 'replaceBytesInRange:withBytes:length:',
            arg: [ { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] } ] },
     { name: 'NSMutableOrderedSet',
       method: 
        [ { selector: 'sortRange:options:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortUsingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortWithOptions:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] } ] },
     { name: 'NSMutableString',
       method: 
        [ { variadic: 'true',
            selector: 'appendFormat:',
            arg: [ { printf_format: 'true', index: '0' } ] } ] },
     { name: 'NSMutableURLRequest',
       method: 
        [ { selector: 'setHTTPShouldHandleCookies:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setHTTPShouldUsePipelining:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSNetService',
       method: 
        [ { selector: 'getInputStream:outputStream:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'setTXTRecordData:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSNotificationCenter',
       method: 
        [ { selector: 'addObserver:selector:name:object:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'addObserverForName:object:queue:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSNumber',
       method: 
        [ { selector: 'boolValue', retval: [ { type: 'B' } ] },
          { selector: 'decimalValue',
            retval: [ { type: '{_NSDecimal=b8b4b1b1b18[8S]}' } ] },
          { selector: 'initWithBool:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'isEqualToNumber:', retval: [ { type: 'B' } ] },
          { selector: 'numberWithBool:',
            class_method: 'true',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSNumberFormatter',
       method: 
        [ { selector: 'allowsFloats', retval: [ { type: 'B' } ] },
          { selector: 'alwaysShowsDecimalSeparator',
            retval: [ { type: 'B' } ] },
          { selector: 'generatesDecimalNumbers',
            retval: [ { type: 'B' } ] },
          { selector: 'getObjectValue:forString:range:error:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'N' },
               { index: '3', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'hasThousandSeparators', retval: [ { type: 'B' } ] },
          { selector: 'isLenient', retval: [ { type: 'B' } ] },
          { selector: 'isPartialStringValidationEnabled',
            retval: [ { type: 'B' } ] },
          { selector: 'localizesFormat', retval: [ { type: 'B' } ] },
          { selector: 'setAllowsFloats:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setAlwaysShowsDecimalSeparator:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setGeneratesDecimalNumbers:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setHasThousandSeparators:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setLenient:', arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setLocalizesFormat:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setPartialStringValidationEnabled:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setUsesGroupingSeparator:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setUsesSignificantDigits:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'usesGroupingSeparator', retval: [ { type: 'B' } ] },
          { selector: 'usesSignificantDigits', retval: [ { type: 'B' } ] } ] },
     { name: 'NSObject',
       method: 
        [ { selector: 'accessInstanceVariablesDirectly',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'accommodatePresentedItemDeletionWithCompletionHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'accommodatePresentedSubitemDeletionAtURL:completionHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'addObserver:forKeyPath:options:context:',
            arg: [ { index: '3', type_modifier: 'n' } ] },
          { selector: 'attemptRecoveryFromError:optionIndex:',
            retval: [ { type: 'B' } ] },
          { selector: 'attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:',
            arg: 
             [ { sel_of_type: 'v16@0:4B8^v12',
                 index: '3',
                 sel_of_type64: 'v28@0:8B16^v20' },
               { index: '4', type_modifier: 'n' } ] },
          { selector: 'authenticateComponents:withData:',
            retval: [ { type: 'B' } ] },
          { selector: 'automaticallyNotifiesObserversForKey:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'beginContentAccess', retval: [ { type: 'B' } ] },
          { selector: 'conformsToProtocol:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'conformsToProtocol:',
            arg: [ { index: '0', type_modifier: 'n' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'connection:canAuthenticateAgainstProtectionSpace:',
            retval: [ { type: 'B' } ] },
          { selector: 'connection:handleRequest:',
            retval: [ { type: 'B' } ] },
          { selector: 'connection:shouldMakeNewConnection:',
            retval: [ { type: 'B' } ] },
          { selector: 'connectionShouldUseCredentialStorage:',
            retval: [ { type: 'B' } ] },
          { selector: 'countByEnumeratingWithState:objects:count:',
            arg: 
             [ { type64: '^{_NSFastEnumerationState=Q^@^Q[5Q]}',
                 type: '^{_NSFastEnumerationState=L^@^L[5L]}',
                 index: '0',
                 type_modifier: 'n' },
               { c_array_length_in_arg: '2', index: '1', type_modifier: 'n' } ] },
          { selector: 'doesContain:', retval: [ { type: 'B' } ] },
          { selector: 'download:canAuthenticateAgainstProtectionSpace:',
            retval: [ { type: 'B' } ] },
          { selector: 'download:shouldDecodeSourceDataOfMIMEType:',
            retval: [ { type: 'B' } ] },
          { selector: 'downloadShouldUseCredentialStorage:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldCopyItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldCopyItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldLinkItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldLinkItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldMoveItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldMoveItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:movingItemAtPath:toPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:movingItemAtURL:toURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:removingItemAtPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldProceedAfterError:removingItemAtURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldRemoveItemAtPath:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileManager:shouldRemoveItemAtURL:',
            retval: [ { type: 'B' } ] },
          { selector: 'handleMachMessage:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'instancesRespondToSelector:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'isCaseInsensitiveLike:',
            retval: [ { type: 'B' } ] },
          { selector: 'isContentDiscarded', retval: [ { type: 'B' } ] },
          { selector: 'isEqual:', retval: [ { type: 'B' } ] },
          { selector: 'isEqualTo:', retval: [ { type: 'B' } ] },
          { selector: 'isGreaterThan:', retval: [ { type: 'B' } ] },
          { selector: 'isGreaterThanOrEqualTo:',
            retval: [ { type: 'B' } ] },
          { selector: 'isKindOfClass:', retval: [ { type: 'B' } ] },
          { selector: 'isLessThan:', retval: [ { type: 'B' } ] },
          { selector: 'isLessThanOrEqualTo:', retval: [ { type: 'B' } ] },
          { selector: 'isLike:', retval: [ { type: 'B' } ] },
          { selector: 'isMemberOfClass:', retval: [ { type: 'B' } ] },
          { selector: 'isNotEqualTo:', retval: [ { type: 'B' } ] },
          { selector: 'isProxy', retval: [ { type: 'B' } ] },
          { selector: 'isSubclassOfClass:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'makeNewConnection:sender:',
            retval: [ { type: 'B' } ] },
          { selector: 'netServiceBrowser:didFindDomain:moreComing:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'netServiceBrowser:didFindService:moreComing:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'netServiceBrowser:didRemoveDomain:moreComing:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'netServiceBrowser:didRemoveService:moreComing:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'observeValueForKeyPath:ofObject:change:context:',
            arg: [ { index: '3', type_modifier: 'n' } ] },
          { selector: 'performSelector:',
            arg: [ { sel_of_type: '@8@0:4', index: '0', sel_of_type64: '@16@0:8' } ] },
          { selector: 'performSelector:onThread:withObject:waitUntilDone:',
            arg: [ { type: 'B', index: '3' } ] },
          { selector: 'performSelector:onThread:withObject:waitUntilDone:modes:',
            arg: [ { type: 'B', index: '3' } ] },
          { selector: 'performSelector:withObject:',
            arg: 
             [ { sel_of_type: '@12@0:4@8',
                 index: '0',
                 sel_of_type64: '@24@0:8@16' } ] },
          { selector: 'performSelector:withObject:withObject:',
            arg: 
             [ { sel_of_type: '@16@0:4@8@12',
                 index: '0',
                 sel_of_type64: '@32@0:8@16@24' } ] },
          { selector: 'performSelectorOnMainThread:withObject:waitUntilDone:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'performSelectorOnMainThread:withObject:waitUntilDone:modes:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'relinquishPresentedItemToReader:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@?' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'relinquishPresentedItemToWriter:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@?' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'resolveClassMethod:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'resolveInstanceMethod:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'respondsToSelector:', retval: [ { type: 'B' } ] },
          { selector: 'savePresentedItemChangesWithCompletionHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'scriptingBeginsWith:', retval: [ { type: 'B' } ] },
          { selector: 'scriptingContains:', retval: [ { type: 'B' } ] },
          { selector: 'scriptingEndsWith:', retval: [ { type: 'B' } ] },
          { selector: 'scriptingIsEqualTo:', retval: [ { type: 'B' } ] },
          { selector: 'scriptingIsGreaterThan:',
            retval: [ { type: 'B' } ] },
          { selector: 'scriptingIsGreaterThanOrEqualTo:',
            retval: [ { type: 'B' } ] },
          { selector: 'scriptingIsLessThan:', retval: [ { type: 'B' } ] },
          { selector: 'scriptingIsLessThanOrEqualTo:',
            retval: [ { type: 'B' } ] },
          { selector: 'setObservationInfo:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'spellServer:checkGrammarInString:language:details:',
            arg: [ { index: '3', type_modifier: 'o' } ] },
          { selector: 'spellServer:findMisspelledWordInString:language:wordCount:countOnly:',
            arg: 
             [ { index: '3', type_modifier: 'o' },
               { type: 'B', index: '4' } ] },
          { selector: 'useStoredAccessor',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'validateValue:forKey:error:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'validateValue:forKeyPath:error:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSOperation',
       method: 
        [ { selector: 'isCancelled', retval: [ { type: 'B' } ] },
          { selector: 'isConcurrent', retval: [ { type: 'B' } ] },
          { selector: 'isExecuting', retval: [ { type: 'B' } ] },
          { selector: 'isFinished', retval: [ { type: 'B' } ] },
          { selector: 'isReady', retval: [ { type: 'B' } ] },
          { selector: 'setCompletionBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSOperationQueue',
       method: 
        [ { selector: 'addOperationWithBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'addOperations:waitUntilFinished:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'isSuspended', retval: [ { type: 'B' } ] },
          { selector: 'setSuspended:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSOrderedSet',
       method: 
        [ { selector: 'containsObject:', retval: [ { type: 'B' } ] },
          { selector: 'enumerateObjectsAtIndexes:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateObjectsUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateObjectsWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'indexOfObject:inSortedRange:options:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'indexOfObjectAtIndexes:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexOfObjectPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexOfObjectWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsAtIndexes:options:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'indexesOfObjectsWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'initWithArray:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithArray:range:copyItems:',
            arg: [ { type: 'B', index: '2' } ] },
          { variadic: 'true', sentinel: '0', selector: 'initWithObjects:' },
          { selector: 'initWithOrderedSet:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithOrderedSet:range:copyItems:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'initWithSet:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'intersectsOrderedSet:', retval: [ { type: 'B' } ] },
          { selector: 'intersectsSet:', retval: [ { type: 'B' } ] },
          { selector: 'isEqualToOrderedSet:', retval: [ { type: 'B' } ] },
          { selector: 'isSubsetOfOrderedSet:', retval: [ { type: 'B' } ] },
          { selector: 'isSubsetOfSet:', retval: [ { type: 'B' } ] },
          { selector: 'orderedSetWithArray:range:copyItems:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { variadic: 'true',
            sentinel: '0',
            selector: 'orderedSetWithObjects:',
            class_method: 'true' },
          { selector: 'orderedSetWithOrderedSet:range:copyItems:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'orderedSetWithSet:copyItems:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'sortedArrayUsingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortedArrayWithOptions:usingComparator:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] } ] },
     { name: 'NSOutputStream',
       method: 
        [ { selector: 'hasSpaceAvailable', retval: [ { type: 'B' } ] },
          { selector: 'initToBuffer:capacity:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'initToFileAtPath:append:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithURL:append:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'outputStreamToBuffer:capacity:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'o' } ] },
          { selector: 'outputStreamToFileAtPath:append:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'outputStreamWithURL:append:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'write:maxLength:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSPointerArray',
       method: 
        [ { selector: 'addPointer:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'insertPointer:atIndex:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'replacePointerAtIndex:withPointer:',
            arg: [ { index: '1', type_modifier: 'n' } ] } ] },
     { name: 'NSPointerFunctions',
       method: 
        [ { selector: 'setAcquireFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' }, { type: '^?' }, { type: 'B' } ],
                 retval: [ { type: '^v' } ] } ] },
          { selector: 'setDescriptionFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' } ],
                 retval: [ { type: '@' } ] } ] },
          { selector: 'setHashFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' }, { type: '^?' } ],
                 retval: [ { type64: 'Q', type: 'I' } ] } ] },
          { selector: 'setIsEqualFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' }, { type: '^v' }, { type: '^?' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'setRelinquishFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' }, { type: '^?' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'setSizeFunction:',
            arg: 
             [ { function_pointer: 'true',
                 type: '^?',
                 index: '0',
                 arg: [ { type: '^v' } ],
                 retval: [ { type64: 'Q', type: 'I' } ] } ] },
          { selector: 'setUsesStrongWriteBarrier:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setUsesWeakReadAndWriteBarriers:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'usesStrongWriteBarrier',
            retval: [ { type: 'B' } ] },
          { selector: 'usesWeakReadAndWriteBarriers',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSPort',
       method: 
        [ { selector: 'isValid', retval: [ { type: 'B' } ] },
          { selector: 'sendBeforeDate:components:from:reserved:',
            retval: [ { type: 'B' } ] },
          { selector: 'sendBeforeDate:msgid:components:from:reserved:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSPortCoder',
       method: 
        [ { selector: 'isBycopy', retval: [ { type: 'B' } ] },
          { selector: 'isByref', retval: [ { type: 'B' } ] } ] },
     { name: 'NSPortMessage',
       method: [ { selector: 'sendBeforeDate:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSPortNameServer',
       method: 
        [ { selector: 'registerPort:name:', retval: [ { type: 'B' } ] },
          { selector: 'removePortForName:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSPositionalSpecifier',
       method: [ { selector: 'insertionReplaces', retval: [ { type: 'B' } ] } ] },
     { name: 'NSPredicate',
       method: 
        [ { selector: 'evaluateWithObject:', retval: [ { type: 'B' } ] },
          { selector: 'evaluateWithObject:substitutionVariables:',
            retval: [ { type: 'B' } ] },
          { selector: 'predicateWithBlock:',
            class_method: 'true',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type: 'B' } ] } ] },
          { variadic: 'true',
            selector: 'predicateWithFormat:',
            class_method: 'true',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { selector: 'predicateWithValue:',
            class_method: 'true',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSProcessInfo',
       method: 
        [ { selector: 'automaticTerminationSupportEnabled',
            retval: [ { type: 'B' } ] },
          { selector: 'setAutomaticTerminationSupportEnabled:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSPropertyListSerialization',
       method: 
        [ { selector: 'dataFromPropertyList:format:errorDescription:',
            class_method: 'true',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'dataWithPropertyList:format:options:error:',
            class_method: 'true',
            arg: [ { index: '3', type_modifier: 'o' } ] },
          { selector: 'propertyList:isValidForFormat:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'propertyListFromData:mutabilityOption:format:errorDescription:',
            class_method: 'true',
            arg: 
             [ { index: '2', type_modifier: 'o' },
               { index: '3', type_modifier: 'o' } ] },
          { selector: 'propertyListWithData:options:format:error:',
            class_method: 'true',
            arg: [ { index: '3', type_modifier: 'o' } ] },
          { selector: 'propertyListWithStream:options:format:error:',
            class_method: 'true',
            arg: [ { index: '3', type_modifier: 'o' } ] },
          { selector: 'writePropertyList:toStream:format:options:error:',
            class_method: 'true',
            arg: [ { index: '4', type_modifier: 'o' } ] } ] },
     { name: 'NSProtocolChecker',
       method: 
        [ { selector: 'initWithTarget:protocol:',
            arg: [ { index: '1', type_modifier: 'n' } ] },
          { selector: 'protocolCheckerWithTarget:protocol:',
            class_method: 'true',
            arg: [ { index: '1', type_modifier: 'n' } ] } ] },
     { name: 'NSProxy',
       method: 
        [ { selector: 'allocWithZone:',
            class_method: 'true',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'respondsToSelector:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSRecursiveLock',
       method: 
        [ { selector: 'lockBeforeDate:', retval: [ { type: 'B' } ] },
          { selector: 'tryLock', retval: [ { type: 'B' } ] } ] },
     { name: 'NSRegularExpression',
       method: 
        [ { selector: 'enumerateMatchesInString:options:range:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '3',
                 arg: [ { type: '@' }, { type64: 'Q', type: 'I' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] } ] },
     { name: 'NSRunLoop',
       method: 
        [ { selector: 'performSelector:target:argument:order:modes:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '0',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'runMode:beforeDate:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSScanner',
       method: 
        [ { selector: 'caseSensitive', retval: [ { type: 'B' } ] },
          { selector: 'isAtEnd', retval: [ { type: 'B' } ] },
          { selector: 'scanCharactersFromSet:intoString:',
            arg: [ { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanDecimal:',
            arg: 
             [ { type: '^{_NSDecimal=b8b4b1b1b18[8S]}',
                 index: '0',
                 type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanDouble:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanFloat:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanHexDouble:', retval: [ { type: 'B' } ] },
          { selector: 'scanHexFloat:', retval: [ { type: 'B' } ] },
          { selector: 'scanHexInt:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanHexLongLong:', retval: [ { type: 'B' } ] },
          { selector: 'scanInt:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanInteger:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanLongLong:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanString:intoString:',
            arg: [ { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanUpToCharactersFromSet:intoString:',
            arg: [ { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'scanUpToString:intoString:',
            arg: [ { index: '1', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'setCaseSensitive:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSScriptClassDescription',
       method: 
        [ { selector: 'hasOrderedToManyRelationshipForKey:',
            retval: [ { type: 'B' } ] },
          { selector: 'hasPropertyForKey:', retval: [ { type: 'B' } ] },
          { selector: 'hasReadablePropertyForKey:',
            retval: [ { type: 'B' } ] },
          { selector: 'hasWritablePropertyForKey:',
            retval: [ { type: 'B' } ] },
          { selector: 'isLocationRequiredToCreateForKey:',
            retval: [ { type: 'B' } ] },
          { selector: 'isReadOnlyKey:', retval: [ { type: 'B' } ] },
          { selector: 'matchesAppleEventCode:',
            retval: [ { type: 'B' } ] },
          { selector: 'supportsCommand:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSScriptCoercionHandler',
       method: 
        [ { selector: 'registerCoercer:selector:toConvertFromClass:toClass:',
            arg: 
             [ { sel_of_type: '@16@0:4@8#12',
                 index: '1',
                 sel_of_type64: '@32@0:8@16#24' } ] } ] },
     { name: 'NSScriptCommand',
       method: [ { selector: 'isWellFormed', retval: [ { type: 'B' } ] } ] },
     { name: 'NSScriptCommandDescription',
       method: 
        [ { selector: 'createCommandInstanceWithZone:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'isOptionalArgumentWithName:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSScriptObjectSpecifier',
       method: 
        [ { selector: 'containerIsObjectBeingTested',
            retval: [ { type: 'B' } ] },
          { selector: 'containerIsRangeContainerObject',
            retval: [ { type: 'B' } ] },
          { selector: 'indicesOfObjectsByEvaluatingWithContainer:count:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'setContainerIsObjectBeingTested:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setContainerIsRangeContainerObject:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSScriptWhoseTest',
       method: [ { selector: 'isTrue', retval: [ { type: 'B' } ] } ] },
     { name: 'NSSet',
       method: 
        [ { selector: 'addObserver:forKeyPath:options:context:',
            arg: [ { index: '3', type_modifier: 'n' } ] },
          { selector: 'containsObject:', retval: [ { type: 'B' } ] },
          { selector: 'enumerateObjectsUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateObjectsWithOptions:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { variadic: 'true', sentinel: '0', selector: 'initWithObjects:' },
          { selector: 'initWithObjects:count:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'initWithSet:copyItems:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'intersectsSet:', retval: [ { type: 'B' } ] },
          { selector: 'isEqualToSet:', retval: [ { type: 'B' } ] },
          { selector: 'isSubsetOfSet:', retval: [ { type: 'B' } ] },
          { selector: 'makeObjectsPerformSelector:',
            arg: [ { sel_of_type: 'v8@0:4', index: '0', sel_of_type64: 'v16@0:8' } ] },
          { selector: 'makeObjectsPerformSelector:withObject:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '0',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'objectsPassingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { selector: 'objectsWithOptions:passingTest:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '1',
                 arg: [ { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'B' } ] } ] },
          { variadic: 'true',
            sentinel: '0',
            selector: 'setWithObjects:',
            class_method: 'true' },
          { selector: 'setWithObjects:count:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSSocketPortNameServer',
       method: 
        [ { selector: 'registerPort:name:', retval: [ { type: 'B' } ] },
          { selector: 'registerPort:name:nameServerPortNumber:',
            retval: [ { type: 'B' } ] },
          { selector: 'removePortForName:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSSortDescriptor',
       method: 
        [ { selector: 'ascending', retval: [ { type: 'B' } ] },
          { selector: 'initWithKey:ascending:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithKey:ascending:comparator:',
            arg: 
             [ { type: 'B', index: '1' },
               { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'initWithKey:ascending:selector:',
            arg: 
             [ { type: 'B', index: '1' },
               { sel_of_type: 'i12@0:4@8',
                 index: '2',
                 sel_of_type64: 'q24@0:8@16' } ] },
          { selector: 'sortDescriptorWithKey:ascending:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'sortDescriptorWithKey:ascending:comparator:',
            class_method: 'true',
            arg: 
             [ { type: 'B', index: '1' },
               { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type: '@' } ],
                 retval: [ { type64: 'q', type: 'i' } ] } ] },
          { selector: 'sortDescriptorWithKey:ascending:selector:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] } ] },
     { name: 'NSSpellServer',
       method: 
        [ { selector: 'isWordInUserDictionaries:caseSensitive:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'registerLanguage:byVendor:',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSStream',
       method: 
        [ { selector: 'getStreamsToHost:port:inputStream:outputStream:',
            class_method: 'true',
            arg: 
             [ { index: '2', type_modifier: 'o' },
               { index: '3', type_modifier: 'o' } ] },
          { selector: 'setProperty:forKey:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSString',
       method: 
        [ { selector: 'boolValue', retval: [ { type: 'B' } ] },
          { selector: 'canBeConvertedToEncoding:',
            retval: [ { type: 'B' } ] },
          { selector: 'completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { type: 'B', index: '1' },
               { index: '2', type_modifier: 'o' } ] },
          { selector: 'dataUsingEncoding:allowLossyConversion:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'enumerateLinesUsingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' }, { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '4',
                 arg: 
                  [ { type: '@' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'enumerateSubstringsInRange:options:usingBlock:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: 
                  [ { type: '@' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type64: '{_NSRange=QQ}', type: '{_NSRange=II}' },
                    { type: '^B' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'getBytes:maxLength:usedLength:encoding:options:range:remainingRange:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' },
               { index: '6', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'getCString:maxLength:encoding:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { ignore: 'true', selector: 'getCharacters:' },
          { ignore: 'true', selector: 'getCharacters:range:' },
          { selector: 'getFileSystemRepresentation:maxLength:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'getLineStart:end:contentsEnd:forRange:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { selector: 'getParagraphStart:end:contentsEnd:forRange:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { selector: 'hasPrefix:', retval: [ { type: 'B' } ] },
          { selector: 'hasSuffix:', retval: [ { type: 'B' } ] },
          { selector: 'initWithBytes:length:encoding:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { suggestion: 'Call initWithBytes:length:encoding:.',
            ignore: 'true',
            selector: 'initWithBytesNoCopy:length:encoding:freeWhenDone:',
            arg: [ { type: 'B', index: '3' } ] },
          { selector: 'initWithCString:length:',
            arg: [ { c_array_of_fixed_length: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'initWithCStringNoCopy:length:freeWhenDone:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'initWithCharacters:length:',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { suggestion: 'Call initWithCharacters:length:.',
            ignore: 'true',
            selector: 'initWithCharactersNoCopy:length:freeWhenDone:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'initWithContentsOfFile:encoding:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithContentsOfFile:usedEncoding:error:',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithContentsOfURL:encoding:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithContentsOfURL:usedEncoding:error:',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { variadic: 'true',
            selector: 'initWithFormat:',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { selector: 'initWithFormat:arguments:' },
          { variadic: 'true',
            selector: 'initWithFormat:locale:',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { selector: 'initWithFormat:locale:arguments:' },
          { selector: 'isAbsolutePath', retval: [ { type: 'B' } ] },
          { selector: 'isEqualToString:', retval: [ { type: 'B' } ] },
          { variadic: 'true',
            selector: 'localizedStringWithFormat:',
            class_method: 'true',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { variadic: 'true',
            selector: 'stringByAppendingFormat:',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { selector: 'stringWithCString:length:',
            class_method: 'true',
            arg: [ { c_array_of_fixed_length: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'stringWithCharacters:length:',
            class_method: 'true',
            arg: [ { c_array_length_in_arg: '1', index: '0', type_modifier: 'n' } ] },
          { selector: 'stringWithContentsOfFile:encoding:error:',
            class_method: 'true',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'stringWithContentsOfFile:usedEncoding:error:',
            class_method: 'true',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { selector: 'stringWithContentsOfURL:encoding:error:',
            class_method: 'true',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'stringWithContentsOfURL:usedEncoding:error:',
            class_method: 'true',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] },
          { variadic: 'true',
            selector: 'stringWithFormat:',
            class_method: 'true',
            arg: [ { printf_format: 'true', index: '0' } ] },
          { selector: 'writeToFile:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToFile:atomically:encoding:error:',
            arg: 
             [ { type: 'B', index: '1' },
               { index: '3', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:atomically:',
            arg: [ { type: 'B', index: '1' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'writeToURL:atomically:encoding:error:',
            arg: 
             [ { type: 'B', index: '1' },
               { index: '3', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSTask',
       method: 
        [ { selector: 'isRunning', retval: [ { type: 'B' } ] },
          { selector: 'resume', retval: [ { type: 'B' } ] },
          { selector: 'setTerminationHandler:',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '0',
                 arg: [ { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'suspend', retval: [ { type: 'B' } ] } ] },
     { name: 'NSThread',
       method: 
        [ { selector: 'detachNewThreadSelector:toTarget:withObject:',
            class_method: 'true',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '0',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'initWithTarget:selector:object:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'isCancelled', retval: [ { type: 'B' } ] },
          { selector: 'isExecuting', retval: [ { type: 'B' } ] },
          { selector: 'isFinished', retval: [ { type: 'B' } ] },
          { selector: 'isMainThread',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'isMainThread', retval: [ { type: 'B' } ] },
          { selector: 'isMultiThreaded',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'setThreadPriority:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSTimeZone',
       method: 
        [ { selector: 'isDaylightSavingTime', retval: [ { type: 'B' } ] },
          { selector: 'isDaylightSavingTimeForDate:',
            retval: [ { type: 'B' } ] },
          { selector: 'isEqualToTimeZone:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSTimer',
       method: 
        [ { selector: 'initWithFireDate:interval:target:selector:userInfo:repeats:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '3',
                 sel_of_type64: 'v24@0:8@16' },
               { type: 'B', index: '5' } ] },
          { selector: 'isValid', retval: [ { type: 'B' } ] },
          { selector: 'scheduledTimerWithTimeInterval:invocation:repeats:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:',
            class_method: 'true',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '2',
                 sel_of_type64: 'v24@0:8@16' },
               { type: 'B', index: '4' } ] },
          { selector: 'timerWithTimeInterval:invocation:repeats:',
            class_method: 'true',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'timerWithTimeInterval:target:selector:userInfo:repeats:',
            class_method: 'true',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '2',
                 sel_of_type64: 'v24@0:8@16' },
               { type: 'B', index: '4' } ] } ] },
     { name: 'NSURL',
       method: 
        [ { selector: 'URLByAppendingPathComponent:isDirectory:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:',
            class_method: 'true',
            arg: [ { type: '^B', index: '3' } ] },
          { selector: 'URLHandleUsingCache:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'checkResourceIsReachableAndReturnError:',
            retval: [ { type: 'B' } ] },
          { selector: 'fileURLWithPath:isDirectory:',
            class_method: 'true',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'getResourceValue:forKey:error:',
            arg: 
             [ { index: '0', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] },
          { selector: 'initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:',
            arg: [ { type: '^B', index: '3' } ] },
          { selector: 'initFileURLWithPath:isDirectory:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'isFileReferenceURL', retval: [ { type: 'B' } ] },
          { selector: 'isFileURL', retval: [ { type: 'B' } ] },
          { selector: 'loadResourceDataNotifyingClient:usingCache:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'resourceDataUsingCache:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setProperty:forKey:', retval: [ { type: 'B' } ] },
          { selector: 'setResourceData:', retval: [ { type: 'B' } ] },
          { selector: 'setResourceValue:forKey:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'setResourceValues:error:',
            retval: [ { type: 'B' } ] },
          { selector: 'writeBookmarkData:toURL:options:error:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSURLConnection',
       method: 
        [ { selector: 'canHandleRequest:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'initWithRequest:delegate:startImmediately:',
            arg: [ { type: 'B', index: '2' } ] },
          { selector: 'sendAsynchronousRequest:queue:completionHandler:',
            class_method: 'true',
            arg: 
             [ { function_pointer: 'true',
                 type: '@?',
                 index: '2',
                 arg: [ { type: '@' }, { type: '@' }, { type: '@' } ],
                 retval: [ { type: 'v' } ] } ] },
          { selector: 'sendSynchronousRequest:returningResponse:error:',
            class_method: 'true',
            arg: 
             [ { index: '1', type_modifier: 'o' },
               { index: '2', type_modifier: 'o' } ] } ] },
     { name: 'NSURLCredential',
       method: [ { selector: 'hasPassword', retval: [ { type: 'B' } ] } ] },
     { name: 'NSURLDownload',
       method: 
        [ { selector: 'canResumeDownloadDecodedWithEncodingMIMEType:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'deletesFileUponFailure',
            retval: [ { type: 'B' } ] },
          { selector: 'setDeletesFileUponFailure:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setDestination:allowOverwrite:',
            arg: [ { type: 'B', index: '1' } ] } ] },
     { name: 'NSURLHandle',
       method: 
        [ { selector: 'canInitWithURL:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'didLoadBytes:loadComplete:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'initWithURL:cached:',
            arg: [ { type: 'B', index: '1' } ] },
          { selector: 'writeData:', retval: [ { type: 'B' } ] },
          { selector: 'writeProperty:forKey:', retval: [ { type: 'B' } ] } ] },
     { name: 'NSURLProtectionSpace',
       method: 
        [ { selector: 'isProxy', retval: [ { type: 'B' } ] },
          { selector: 'receivesCredentialSecurely',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSURLProtocol',
       method: 
        [ { selector: 'canInitWithRequest:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'registerClass:',
            class_method: 'true',
            retval: [ { type: 'B' } ] },
          { selector: 'requestIsCacheEquivalent:toRequest:',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSURLRequest',
       method: 
        [ { selector: 'HTTPShouldHandleCookies',
            retval: [ { type: 'B' } ] },
          { selector: 'HTTPShouldUsePipelining',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSUbiquitousKeyValueStore',
       method: 
        [ { selector: 'boolForKey:', retval: [ { type: 'B' } ] },
          { selector: 'setBool:forKey:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'synchronize', retval: [ { type: 'B' } ] } ] },
     { name: 'NSUnarchiver',
       method: 
        [ { selector: 'isAtEnd', retval: [ { type: 'B' } ] },
          { selector: 'setObjectZone:',
            arg: [ { index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSUndoManager',
       method: 
        [ { selector: 'canRedo', retval: [ { type: 'B' } ] },
          { selector: 'canUndo', retval: [ { type: 'B' } ] },
          { selector: 'groupsByEvent', retval: [ { type: 'B' } ] },
          { selector: 'isRedoing', retval: [ { type: 'B' } ] },
          { selector: 'isUndoRegistrationEnabled',
            retval: [ { type: 'B' } ] },
          { selector: 'isUndoing', retval: [ { type: 'B' } ] },
          { selector: 'redoActionIsDiscardable',
            retval: [ { type: 'B' } ] },
          { selector: 'registerUndoWithTarget:selector:object:',
            arg: 
             [ { sel_of_type: 'v12@0:4@8',
                 index: '1',
                 sel_of_type64: 'v24@0:8@16' } ] },
          { selector: 'setActionIsDiscardable:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setGroupsByEvent:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'undoActionIsDiscardable',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSUserDefaults',
       method: 
        [ { selector: 'boolForKey:', retval: [ { type: 'B' } ] },
          { selector: 'objectIsForcedForKey:', retval: [ { type: 'B' } ] },
          { selector: 'objectIsForcedForKey:inDomain:',
            retval: [ { type: 'B' } ] },
          { selector: 'setBool:forKey:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'synchronize', retval: [ { type: 'B' } ] } ] },
     { name: 'NSValue',
       method: 
        [ { ignore: 'true', selector: 'getValue:' },
          { selector: 'initWithBytes:objCType:',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'isEqualToValue:', retval: [ { type: 'B' } ] },
          { selector: 'value:withObjCType:',
            class_method: 'true',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'valueWithBytes:objCType:',
            class_method: 'true',
            arg: [ { index: '0', type_modifier: 'n' } ] },
          { selector: 'valueWithPointer:',
            class_method: 'true',
            arg: [ { index: '0', type_modifier: 'n' } ] } ] },
     { name: 'NSValueTransformer',
       method: 
        [ { selector: 'allowsReverseTransformation',
            class_method: 'true',
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSXMLDTD',
       method: 
        [ { selector: 'initWithContentsOfURL:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithData:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] } ] },
     { name: 'NSXMLDTDNode',
       method: [ { selector: 'isExternal', retval: [ { type: 'B' } ] } ] },
     { name: 'NSXMLDocument',
       method: 
        [ { selector: 'initWithContentsOfURL:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithData:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'initWithXMLString:options:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'isStandalone', retval: [ { type: 'B' } ] },
          { selector: 'objectByApplyingXSLT:arguments:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'objectByApplyingXSLTAtURL:arguments:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'objectByApplyingXSLTString:arguments:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'setStandalone:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'validateAndReturnError:',
            arg: [ { index: '0', type_modifier: 'o' } ],
            retval: [ { type: 'B' } ] } ] },
     { name: 'NSXMLElement',
       method: 
        [ { selector: 'initWithXMLString:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'normalizeAdjacentTextNodesPreservingCDATA:',
            arg: [ { type: 'B', index: '0' } ] } ] },
     { name: 'NSXMLNode',
       method: 
        [ { selector: 'canonicalXMLStringPreservingComments:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'nodesForXPath:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'objectsForXQuery:constants:error:',
            arg: [ { index: '2', type_modifier: 'o' } ] },
          { selector: 'objectsForXQuery:error:',
            arg: [ { index: '1', type_modifier: 'o' } ] },
          { selector: 'setStringValue:resolvingEntities:',
            arg: [ { type: 'B', index: '1' } ] } ] },
     { name: 'NSXMLParser',
       method: 
        [ { selector: 'parse', retval: [ { type: 'B' } ] },
          { selector: 'setShouldProcessNamespaces:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setShouldReportNamespacePrefixes:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'setShouldResolveExternalEntities:',
            arg: [ { type: 'B', index: '0' } ] },
          { selector: 'shouldProcessNamespaces',
            retval: [ { type: 'B' } ] },
          { selector: 'shouldReportNamespacePrefixes',
            retval: [ { type: 'B' } ] },
          { selector: 'shouldResolveExternalEntities',
            retval: [ { type: 'B' } ] } ] } ],
  informal_protocol: 
   [ { name: 'NSArchiverCallback',
       method: 
        [ { type64: '#16@0:8',
            type: '#8@0:4',
            selector: 'classForArchiver' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'replacementObjectForArchiver:' } ] },
     { name: 'NSCacheDelegate',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'cache:willEvictObject:' } ] },
     { name: 'NSClassDescriptionPrimitives',
       method: 
        [ { type64: '@16@0:8', type: '@8@0:4', selector: 'attributeKeys' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'classDescription' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'inverseForRelationshipKey:' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'toManyRelationshipKeys' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'toOneRelationshipKeys' } ] },
     { name: 'NSCoderMethods',
       method: 
        [ { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'awakeAfterUsingCoder:' },
          { type64: '#16@0:8', type: '#8@0:4', selector: 'classForCoder' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'replacementObjectForCoder:' },
          { type64: 'v24@0:8q16',
            type: 'v12@0:4i8',
            selector: 'setVersion:',
            class_method: 'true' },
          { type64: 'q16@0:8',
            type: 'i8@0:4',
            selector: 'version',
            class_method: 'true' } ] },
     { name: 'NSCoding',
       method: 
        [ { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'encodeWithCoder:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'initWithCoder:' } ] },
     { name: 'NSComparisonMethods',
       method: 
        [ { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'doesContain:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isCaseInsensitiveLike:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isEqualTo:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isGreaterThan:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isGreaterThanOrEqualTo:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isLessThan:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isLessThanOrEqualTo:' },
          { type64: 'B24@0:8@16', type: 'B12@0:4@8', selector: 'isLike:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'isNotEqualTo:' } ] },
     { name: 'NSConnectionDelegate',
       method: 
        [ { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'authenticateComponents:withData:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'authenticationDataForComponents:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'connection:handleRequest:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'connection:shouldMakeNewConnection:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'createConversationForConnection:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'makeNewConnection:sender:' } ] },
     { name: 'NSCopyLinkMoveHandler',
       method: 
        [ { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'fileManager:shouldProceedAfterError:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'fileManager:willProcessPath:' } ] },
     { name: 'NSCopying',
       method: 
        [ { type64: '@24@0:8^{_NSZone=}16',
            type: '@12@0:4^{_NSZone=}8',
            selector: 'copyWithZone:' } ] },
     { name: 'NSDecimalNumberBehaviors',
       method: 
        [ { type64: '@48@0:8:16Q24@32@40',
            type: '@24@0:4:8I12@16@20',
            selector: 'exceptionDuringOperation:error:leftOperand:rightOperand:' },
          { type64: 'Q16@0:8', type: 'I8@0:4', selector: 'roundingMode' },
          { type64: 's16@0:8', type: 's8@0:4', selector: 'scale' } ] },
     { name: 'NSDelayedPerforming',
       method: 
        [ { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'cancelPreviousPerformRequestsWithTarget:',
            class_method: 'true' },
          { type64: 'v40@0:8@16:24@32',
            type: 'v20@0:4@8:12@16',
            selector: 'cancelPreviousPerformRequestsWithTarget:selector:object:',
            class_method: 'true' },
          { type64: 'v40@0:8:16@24d32',
            type: 'v24@0:4:8@12d16',
            selector: 'performSelector:withObject:afterDelay:' },
          { type64: 'v48@0:8:16@24d32@40',
            type: 'v28@0:4:8@12d16@24',
            selector: 'performSelector:withObject:afterDelay:inModes:' } ] },
     { name: 'NSDeprecatedKeyValueCoding',
       method: 
        [ { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'handleQueryWithUnboundKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'handleTakeValue:forUnboundKey:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'storedValueForKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'takeStoredValue:forKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'takeValue:forKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'takeValue:forKeyPath:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'takeValuesFromDictionary:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'unableToSetNilForKey:' },
          { type64: 'B16@0:8',
            type: 'B8@0:4',
            selector: 'useStoredAccessor',
            class_method: 'true' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'valuesForKeys:' } ] },
     { name: 'NSDeprecatedKeyValueObservingCustomization',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'setKeys:triggerChangeNotificationsForDependentKey:',
            class_method: 'true' } ] },
     { name: 'NSDiscardableContent',
       method: 
        [ { type64: 'B16@0:8',
            type: 'B8@0:4',
            selector: 'beginContentAccess' },
          { type64: 'v16@0:8',
            type: 'v8@0:4',
            selector: 'discardContentIfPossible' },
          { type64: 'v16@0:8',
            type: 'v8@0:4',
            selector: 'endContentAccess' },
          { type64: 'B16@0:8',
            type: 'B8@0:4',
            selector: 'isContentDiscarded' } ] },
     { name: 'NSDiscardableContentProxy',
       method: 
        [ { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'autoContentAccessingProxy' } ] },
     { name: 'NSDistributedObjects',
       method: 
        [ { type64: '#16@0:8',
            type: '#8@0:4',
            selector: 'classForPortCoder' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'replacementObjectForPortCoder:' } ] },
     { name: 'NSErrorRecoveryAttempting',
       method: 
        [ { type64: 'B32@0:8@16Q24',
            type: 'B16@0:4@8I12',
            selector: 'attemptRecoveryFromError:optionIndex:' },
          { type64: 'v56@0:8@16Q24@32:40^v48',
            type: 'v28@0:4@8I12@16:20^v24',
            selector: 'attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:' } ] },
     { name: 'NSFastEnumeration',
       method: 
        [ { type64: 'Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32',
            type: 'I20@0:4^{?=L^@^L[5L]}8^@12I16',
            selector: 'countByEnumeratingWithState:objects:count:' } ] },
     { name: 'NSFileManagerDelegate',
       method: 
        [ { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldCopyItemAtPath:toPath:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldCopyItemAtURL:toURL:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldLinkItemAtPath:toPath:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldLinkItemAtURL:toURL:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldMoveItemAtPath:toPath:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldMoveItemAtURL:toURL:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:movingItemAtPath:toPath:' },
          { type64: 'B48@0:8@16@24@32@40',
            type: 'B24@0:4@8@12@16@20',
            selector: 'fileManager:shouldProceedAfterError:movingItemAtURL:toURL:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldProceedAfterError:removingItemAtPath:' },
          { type64: 'B40@0:8@16@24@32',
            type: 'B20@0:4@8@12@16',
            selector: 'fileManager:shouldProceedAfterError:removingItemAtURL:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'fileManager:shouldRemoveItemAtPath:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'fileManager:shouldRemoveItemAtURL:' } ] },
     { name: 'NSFilePresenter',
       method: 
        [ { type64: 'v24@0:8@?16',
            type: 'v12@0:4@?8',
            selector: 'accommodatePresentedItemDeletionWithCompletionHandler:' },
          { type64: 'v32@0:8@16@?24',
            type: 'v16@0:4@8@?12',
            selector: 'accommodatePresentedSubitemDeletionAtURL:completionHandler:' },
          { type64: 'v16@0:8',
            type: 'v8@0:4',
            selector: 'presentedItemDidChange' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedItemDidGainVersion:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedItemDidLoseVersion:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedItemDidMoveToURL:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedItemDidResolveConflictVersion:' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'presentedItemOperationQueue' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'presentedItemURL' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'presentedSubitemAtURL:didGainVersion:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'presentedSubitemAtURL:didLoseVersion:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'presentedSubitemAtURL:didMoveToURL:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'presentedSubitemAtURL:didResolveConflictVersion:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedSubitemDidAppearAtURL:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'presentedSubitemDidChangeAtURL:' },
          { type64: 'v24@0:8@?16',
            type: 'v12@0:4@?8',
            selector: 'relinquishPresentedItemToReader:' },
          { type64: 'v24@0:8@?16',
            type: 'v12@0:4@?8',
            selector: 'relinquishPresentedItemToWriter:' },
          { type64: 'v24@0:8@?16',
            type: 'v12@0:4@?8',
            selector: 'savePresentedItemChangesWithCompletionHandler:' } ] },
     { name: 'NSKeyValueCoding',
       method: 
        [ { type64: 'B16@0:8',
            type: 'B8@0:4',
            selector: 'accessInstanceVariablesDirectly',
            class_method: 'true' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'dictionaryWithValuesForKeys:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableArrayValueForKey:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableArrayValueForKeyPath:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableOrderedSetValueForKey:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableOrderedSetValueForKeyPath:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableSetValueForKey:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'mutableSetValueForKeyPath:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'setNilValueForKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'setValue:forKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'setValue:forKeyPath:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'setValue:forUndefinedKey:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'setValuesForKeysWithDictionary:' },
          { type64: 'B40@0:8N^@16@24o^@32',
            type: 'B20@0:4N^@8@12o^@16',
            selector: 'validateValue:forKey:error:' },
          { type64: 'B40@0:8N^@16@24o^@32',
            type: 'B20@0:4N^@8@12o^@16',
            selector: 'validateValue:forKeyPath:error:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'valueForKey:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'valueForKeyPath:' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'valueForUndefinedKey:' } ] },
     { name: 'NSKeyValueObserverNotification',
       method: 
        [ { type64: 'v40@0:8Q16@24@32',
            type: 'v20@0:4I8@12@16',
            selector: 'didChange:valuesAtIndexes:forKey:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'didChangeValueForKey:' },
          { type64: 'v40@0:8@16Q24@32',
            type: 'v20@0:4@8I12@16',
            selector: 'didChangeValueForKey:withSetMutation:usingObjects:' },
          { type64: 'v40@0:8Q16@24@32',
            type: 'v20@0:4I8@12@16',
            selector: 'willChange:valuesAtIndexes:forKey:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'willChangeValueForKey:' },
          { type64: 'v40@0:8@16Q24@32',
            type: 'v20@0:4@8I12@16',
            selector: 'willChangeValueForKey:withSetMutation:usingObjects:' } ] },
     { name: 'NSKeyValueObserverRegistration',
       method: 
        [ { type64: 'v48@0:8@16@24Q32^v40',
            type: 'v24@0:4@8@12I16^v20',
            selector: 'addObserver:forKeyPath:options:context:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'removeObserver:forKeyPath:' },
          { type64: 'v40@0:8@16@24^v32',
            type: 'v20@0:4@8@12^v16',
            selector: 'removeObserver:forKeyPath:context:' } ] },
     { name: 'NSKeyValueObserving',
       method: 
        [ { type64: 'v48@0:8@16@24@32^v40',
            type: 'v24@0:4@8@12@16^v20',
            selector: 'observeValueForKeyPath:ofObject:change:context:' } ] },
     { name: 'NSKeyValueObservingCustomization',
       method: 
        [ { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'automaticallyNotifiesObserversForKey:',
            class_method: 'true' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'keyPathsForValuesAffectingValueForKey:',
            class_method: 'true' },
          { type64: '^v16@0:8',
            type: '^v8@0:4',
            selector: 'observationInfo' },
          { type64: 'v24@0:8^v16',
            type: 'v12@0:4^v8',
            selector: 'setObservationInfo:' } ] },
     { name: 'NSKeyedArchiverDelegate',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'archiver:didEncodeObject:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'archiver:willEncodeObject:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'archiver:willReplaceObject:withObject:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'archiverDidFinish:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'archiverWillFinish:' } ] },
     { name: 'NSKeyedArchiverObjectSubstitution',
       method: 
        [ { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'classFallbacksForKeyedArchiver',
            class_method: 'true' },
          { type64: '#16@0:8',
            type: '#8@0:4',
            selector: 'classForKeyedArchiver' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'replacementObjectForKeyedArchiver:' } ] },
     { name: 'NSKeyedUnarchiverDelegate',
       method: 
        [ { type64: '#40@0:8@16@24@32',
            type: '#20@0:4@8@12@16',
            selector: 'unarchiver:cannotDecodeObjectOfClassName:originalClasses:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'unarchiver:didDecodeObject:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'unarchiver:willReplaceObject:withObject:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'unarchiverDidFinish:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'unarchiverWillFinish:' } ] },
     { name: 'NSKeyedUnarchiverObjectSubstitution',
       method: 
        [ { type64: '#16@0:8',
            type: '#8@0:4',
            selector: 'classForKeyedUnarchiver',
            class_method: 'true' } ] },
     { name: 'NSLocking',
       method: 
        [ { type64: 'v16@0:8', type: 'v8@0:4', selector: 'lock' },
          { type64: 'v16@0:8', type: 'v8@0:4', selector: 'unlock' } ] },
     { name: 'NSMachPortDelegate',
       method: 
        [ { type64: 'v24@0:8^v16',
            type: 'v12@0:4^v8',
            selector: 'handleMachMessage:' } ] },
     { name: 'NSMetadataQueryDelegate',
       method: 
        [ { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'metadataQuery:replacementObjectForResultObject:' },
          { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'metadataQuery:replacementValueForAttribute:value:' } ] },
     { name: 'NSMutableCopying',
       method: 
        [ { type64: '@24@0:8^{_NSZone=}16',
            type: '@12@0:4^{_NSZone=}8',
            selector: 'mutableCopyWithZone:' } ] },
     { name: 'NSNetServiceBrowserDelegate',
       method: 
        [ { type64: 'v36@0:8@16@24B32',
            type: 'v20@0:4@8@12B16',
            selector: 'netServiceBrowser:didFindDomain:moreComing:' },
          { type64: 'v36@0:8@16@24B32',
            type: 'v20@0:4@8@12B16',
            selector: 'netServiceBrowser:didFindService:moreComing:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'netServiceBrowser:didNotSearch:' },
          { type64: 'v36@0:8@16@24B32',
            type: 'v20@0:4@8@12B16',
            selector: 'netServiceBrowser:didRemoveDomain:moreComing:' },
          { type64: 'v36@0:8@16@24B32',
            type: 'v20@0:4@8@12B16',
            selector: 'netServiceBrowser:didRemoveService:moreComing:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceBrowserDidStopSearch:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceBrowserWillSearch:' } ] },
     { name: 'NSNetServiceDelegate',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'netService:didNotPublish:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'netService:didNotResolve:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'netService:didUpdateTXTRecordData:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceDidPublish:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceDidResolveAddress:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceDidStop:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceWillPublish:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'netServiceWillResolve:' } ] },
     { name: 'NSObject',
       method: 
        [ { type64: '@16@0:8', type: '@8@0:4', selector: 'autorelease' },
          { type64: '#16@0:8', type: '#8@0:4', selector: 'class' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'conformsToProtocol:' },
          { type64: '@16@0:8', type: '@8@0:4', selector: 'description' },
          { type64: 'Q16@0:8', type: 'I8@0:4', selector: 'hash' },
          { type64: 'B24@0:8@16', type: 'B12@0:4@8', selector: 'isEqual:' },
          { type64: 'B24@0:8#16',
            type: 'B12@0:4#8',
            selector: 'isKindOfClass:' },
          { type64: 'B24@0:8#16',
            type: 'B12@0:4#8',
            selector: 'isMemberOfClass:' },
          { type64: 'B16@0:8', type: 'B8@0:4', selector: 'isProxy' },
          { type64: '@24@0:8:16',
            type: '@12@0:4:8',
            selector: 'performSelector:' },
          { type64: '@32@0:8:16@24',
            type: '@16@0:4:8@12',
            selector: 'performSelector:withObject:' },
          { type64: '@40@0:8:16@24@32',
            type: '@20@0:4:8@12@16',
            selector: 'performSelector:withObject:withObject:' },
          { type64: 'Vv16@0:8', type: 'Vv8@0:4', selector: 'release' },
          { type64: 'B24@0:8:16',
            type: 'B12@0:4:8',
            selector: 'respondsToSelector:' },
          { type64: '@16@0:8', type: '@8@0:4', selector: 'retain' },
          { type64: 'Q16@0:8', type: 'I8@0:4', selector: 'retainCount' },
          { type64: '@16@0:8', type: '@8@0:4', selector: 'self' },
          { type64: '#16@0:8', type: '#8@0:4', selector: 'superclass' },
          { type64: '^{_NSZone=}16@0:8',
            type: '^{_NSZone=}8@0:4',
            selector: 'zone' } ] },
     { name: 'NSPortDelegate',
       method: 
        [ { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'handlePortMessage:' } ] },
     { name: 'NSScriptClassDescription',
       method: 
        [ { type64: 'I16@0:8', type: 'L8@0:4', selector: 'classCode' },
          { type64: '@16@0:8', type: '@8@0:4', selector: 'className' } ] },
     { name: 'NSScriptKeyValueCoding',
       method: 
        [ { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'coerceValue:forKey:' },
          { type64: 'v40@0:8@16Q24@32',
            type: 'v20@0:4@8I12@16',
            selector: 'insertValue:atIndex:inPropertyWithKey:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'insertValue:inPropertyWithKey:' },
          { type64: 'v32@0:8Q16@24',
            type: 'v16@0:4I8@12',
            selector: 'removeValueAtIndex:fromPropertyWithKey:' },
          { type64: 'v40@0:8Q16@24@32',
            type: 'v20@0:4I8@12@16',
            selector: 'replaceValueAtIndex:inPropertyWithKey:withValue:' },
          { type64: '@32@0:8Q16@24',
            type: '@16@0:4I8@12',
            selector: 'valueAtIndex:inPropertyWithKey:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'valueWithName:inPropertyWithKey:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'valueWithUniqueID:inPropertyWithKey:' } ] },
     { name: 'NSScriptObjectSpecifiers',
       method: 
        [ { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'indicesOfObjectsByEvaluatingObjectSpecifier:' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'objectSpecifier' } ] },
     { name: 'NSScripting',
       method: 
        [ { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'copyScriptingValue:forKey:withProperties:' },
          { type64: '@48@0:8#16@24@32@40',
            type: '@24@0:4#8@12@16@20',
            selector: 'newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:' },
          { type64: '@16@0:8',
            type: '@8@0:4',
            selector: 'scriptingProperties' },
          { type64: '@24@0:8@16',
            type: '@12@0:4@8',
            selector: 'scriptingValueForSpecifier:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'setScriptingProperties:' } ] },
     { name: 'NSScriptingComparisonMethods',
       method: 
        [ { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingBeginsWith:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingContains:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingEndsWith:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingIsEqualTo:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingIsGreaterThan:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingIsGreaterThanOrEqualTo:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingIsLessThan:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'scriptingIsLessThanOrEqualTo:' } ] },
     { name: 'NSSpellServerDelegate',
       method: 
        [ { type64: '{_NSRange=QQ}48@0:8@16@24@32^@40',
            type: '{_NSRange=II}24@0:4@8@12@16^@20',
            selector: 'spellServer:checkGrammarInString:language:details:' },
          { type64: '@72@0:8@16@24Q32Q40@48@56^q64',
            type: '@40@0:4@8@12I16Q20@28@32^i36',
            selector: 'spellServer:checkString:offset:types:options:orthography:wordCount:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'spellServer:didForgetWord:inLanguage:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'spellServer:didLearnWord:inLanguage:' },
          { type64: '{_NSRange=QQ}52@0:8@16@24@32^q40B48',
            type: '{_NSRange=II}28@0:4@8@12@16^i20B24',
            selector: 'spellServer:findMisspelledWordInString:language:wordCount:countOnly:' },
          { type64: 'v56@0:8@16Q24@32@40@48',
            type: 'v28@0:4@8I12@16@20@24',
            selector: 'spellServer:recordResponse:toCorrection:forWord:language:' },
          { type64: '@56@0:8@16{_NSRange=QQ}24@40@48',
            type: '@28@0:4@8{_NSRange=II}12@20@24',
            selector: 'spellServer:suggestCompletionsForPartialWordRange:inString:language:' },
          { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'spellServer:suggestGuessesForWord:inLanguage:' } ] },
     { name: 'NSStreamDelegate',
       method: 
        [ { type64: 'v32@0:8@16Q24',
            type: 'v16@0:4@8I12',
            selector: 'stream:handleEvent:' } ] },
     { name: 'NSThreadPerformAdditions',
       method: 
        [ { type64: 'v44@0:8:16@24@32B40',
            type: 'v24@0:4:8@12@16B20',
            selector: 'performSelector:onThread:withObject:waitUntilDone:' },
          { type64: 'v52@0:8:16@24@32B40@44',
            type: 'v28@0:4:8@12@16B20@24',
            selector: 'performSelector:onThread:withObject:waitUntilDone:modes:' },
          { type64: 'v32@0:8:16@24',
            type: 'v16@0:4:8@12',
            selector: 'performSelectorInBackground:withObject:' },
          { type64: 'v36@0:8:16@24B32',
            type: 'v20@0:4:8@12B16',
            selector: 'performSelectorOnMainThread:withObject:waitUntilDone:' },
          { type64: 'v44@0:8:16@24B32@36',
            type: 'v24@0:4:8@12B16@20',
            selector: 'performSelectorOnMainThread:withObject:waitUntilDone:modes:' } ] },
     { name: 'NSURLAuthenticationChallengeSender',
       method: 
        [ { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'cancelAuthenticationChallenge:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'continueWithoutCredentialForAuthenticationChallenge:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'performDefaultHandlingForAuthenticationChallenge:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'rejectProtectionSpaceAndContinueWithChallenge:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'useCredential:forAuthenticationChallenge:' } ] },
     { name: 'NSURLClient',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URL:resourceDataDidBecomeAvailable:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URL:resourceDidFailLoadingWithReason:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLResourceDidCancelLoading:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLResourceDidFinishLoading:' } ] },
     { name: 'NSURLConnectionDelegate',
       method: 
        [ { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'connection:canAuthenticateAgainstProtectionSpace:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:didCancelAuthenticationChallenge:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:didFailWithError:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:didReceiveAuthenticationChallenge:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:didReceiveData:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:didReceiveResponse:' },
          { type64: 'v48@0:8@16q24q32q40',
            type: 'v24@0:4@8i12i16i20',
            selector: 'connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'connection:needNewBodyStream:' },
          { type64: '@32@0:8@16@24',
            type: '@16@0:4@8@12',
            selector: 'connection:willCacheResponse:' },
          { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'connection:willSendRequest:redirectResponse:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'connection:willSendRequestForAuthenticationChallenge:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'connectionDidFinishLoading:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'connectionShouldUseCredentialStorage:' } ] },
     { name: 'NSURLDownloadDelegate',
       method: 
        [ { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'download:canAuthenticateAgainstProtectionSpace:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:decideDestinationWithSuggestedFilename:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:didCancelAuthenticationChallenge:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:didCreateDestination:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:didFailWithError:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:didReceiveAuthenticationChallenge:' },
          { type64: 'v32@0:8@16Q24',
            type: 'v16@0:4@8I12',
            selector: 'download:didReceiveDataOfLength:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'download:didReceiveResponse:' },
          { type64: 'B32@0:8@16@24',
            type: 'B16@0:4@8@12',
            selector: 'download:shouldDecodeSourceDataOfMIMEType:' },
          { type64: 'v40@0:8@16@24q32',
            type: 'v24@0:4@8@12q16',
            selector: 'download:willResumeWithResponse:fromByte:' },
          { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'download:willSendRequest:redirectResponse:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'downloadDidBegin:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'downloadDidFinish:' },
          { type64: 'B24@0:8@16',
            type: 'B12@0:4@8',
            selector: 'downloadShouldUseCredentialStorage:' } ] },
     { name: 'NSURLHandleClient',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLHandle:resourceDataDidBecomeAvailable:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLHandle:resourceDidFailLoadingWithReason:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLHandleResourceDidBeginLoading:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLHandleResourceDidCancelLoading:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLHandleResourceDidFinishLoading:' } ] },
     { name: 'NSURLProtocolClient',
       method: 
        [ { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLProtocol:cachedResponseIsValid:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLProtocol:didCancelAuthenticationChallenge:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLProtocol:didFailWithError:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLProtocol:didLoadData:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'URLProtocol:didReceiveAuthenticationChallenge:' },
          { type64: 'v40@0:8@16@24Q32',
            type: 'v20@0:4@8@12I16',
            selector: 'URLProtocol:didReceiveResponse:cacheStoragePolicy:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'URLProtocol:wasRedirectedToRequest:redirectResponse:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'URLProtocolDidFinishLoading:' } ] },
     { name: 'NSXMLParserDelegate',
       method: 
        [ { type64: 'v48@0:8@16@24@32@40',
            type: 'v24@0:4@8@12@16@20',
            selector: 'parser:didEndElement:namespaceURI:qualifiedName:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:didEndMappingPrefix:' },
          { type64: 'v56@0:8@16@24@32@40@48',
            type: 'v28@0:4@8@12@16@20@24',
            selector: 'parser:didStartElement:namespaceURI:qualifiedName:attributes:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'parser:didStartMappingPrefix:toURI:' },
          { type64: 'v56@0:8@16@24@32@40@48',
            type: 'v28@0:4@8@12@16@20@24',
            selector: 'parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:foundCDATA:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:foundCharacters:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:foundComment:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'parser:foundElementDeclarationWithName:model:' },
          { type64: 'v48@0:8@16@24@32@40',
            type: 'v24@0:4@8@12@16@20',
            selector: 'parser:foundExternalEntityDeclarationWithName:publicID:systemID:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:foundIgnorableWhitespace:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'parser:foundInternalEntityDeclarationWithName:value:' },
          { type64: 'v48@0:8@16@24@32@40',
            type: 'v24@0:4@8@12@16@20',
            selector: 'parser:foundNotationDeclarationWithName:publicID:systemID:' },
          { type64: 'v40@0:8@16@24@32',
            type: 'v20@0:4@8@12@16',
            selector: 'parser:foundProcessingInstructionWithTarget:data:' },
          { type64: 'v56@0:8@16@24@32@40@48',
            type: 'v28@0:4@8@12@16@20@24',
            selector: 'parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:parseErrorOccurred:' },
          { type64: '@40@0:8@16@24@32',
            type: '@20@0:4@8@12@16',
            selector: 'parser:resolveExternalEntityName:systemID:' },
          { type64: 'v32@0:8@16@24',
            type: 'v16@0:4@8@12',
            selector: 'parser:validationErrorOccurred:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'parserDidEndDocument:' },
          { type64: 'v24@0:8@16',
            type: 'v12@0:4@8',
            selector: 'parserDidStartDocument:' } ] } ] }
